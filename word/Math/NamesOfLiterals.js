/*
 * (c) Copyright Ascensio System SIA 2010-2019
 *
 * This program is a free software product. You can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License (AGPL)
 * version 3 as published by the Free Software Foundation. In accordance with
 * Section 7(a) of the GNU AGPL its Section 15 shall be amended to the effect
 * that Ascensio System SIA expressly excludes the warranty of non-infringement
 * of any third-party rights.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR  PURPOSE. For
 * details, see the GNU AGPL at: http://www.gnu.org/licenses/agpl-3.0.html
 *
 * You can contact Ascensio System SIA at 20A-12 Ernesta Birznieka-Upisha
 * street, Riga, Latvia, EU, LV-1050.
 *
 * The  interactive user interfaces in modified source and object code versions
 * of the Program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU AGPL version 3.
 *
 * Pursuant to Section 7(b) of the License you must retain the original Product
 * logo when distributing the program. Pursuant to Section 7(e) we decline to
 * grant you any rights under trademark law for use of our trademarks.
 *
 * All the Product's GUI elements, including illustrations and icon sets, as
 * well as technical writing content are licensed under the terms of the
 * Creative Commons Attribution-ShareAlike 4.0 International. See the License
 * terms at http://creativecommons.org/licenses/by-sa/4.0/legalcode
 *
 */

"use strict";
//todo ‚î§ and check


(function (window) {
	/**
	 * @typedef {Object} LiteralType
	 * @property {number} index –ò–Ω–¥–µ–∫—Å –ª–∏—Ç–µ—Ä–∞–ª–∞
	 * @property {string} nameOfLiteral –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞–ª–∞
	 */
	/**
	 * @param {Object.<number, LiteralType>} LiteralTypesList
	 */

	const oNamesOfLiterals = {
		fractionLiteral:				[0, "FractionLiteral"],
		spaceLiteral:					[1, "SpaceLiteral"],
		charLiteral:					[2, "CharLiteral"],
		accentLiteral:					[4, "AccentLiteral"],
		operatorLiteral:				[5, "OperatorLiteral"],
		binomLiteral:					[6, "BinomLiteral"],
		bracketBlockLiteral:			[7, "BracketBlock"],
		functionLiteral:				[8, "FunctionLiteral"],
		subSupLiteral:					[9, "SubSupLiteral"],
		sqrtLiteral:					[10, "SqrtLiteral"],
		numberLiteral:					[11, "NumberLiteral"],
		mathOperatorLiteral:			[12, "MathOperatorLiteral"],
		rectLiteral:					[13, "RectLiteral"],
		boxLiteral:						[14, "BoxLiteral"],
		preScriptLiteral:				[15, "PreScriptLiteral"],
		mathFontLiteral:				[16, "MathFontLiteral"],
		overLiteral:					[17, "OverLiteral"],
		diacriticLiteral:				[18, "DiacriticLiteral"],
		diacriticBaseLiteral:			[19, "DiacriticBaseLiteral"],
		otherLiteral:					[20, "OtherLiteral"],
		anMathLiteral:					[21, "AnMathLiteral"],
		opBuildupLiteral:				[22, "opBuildUpLiteral"],
		opOpenBracket:					[23, "opOpenLiteral"],
		opCloseBracket:					[24, "opCLoseLiteral"],
		opOpenCloseBracket:				[25, "opCloseLiteral"],
		belowLiteral:					[26, "belowLiteral"],
		aboveLiteral:					[27, "aboveLiteral"],
		hBracketLiteral:				[27, "hBracketLiteral"],
		opNaryLiteral:					[28, "opNaryLiteral"],
		asciiLiteral:					[29, "asciiLiteral"],
		opArrayLiteral:					[30, "opArrayLiteral"],
		opDecimal:						[31, "opDecimal"],

		specialScriptNumberLiteral:		[32, "specialScriptLiteral"],
		specialScriptCharLiteral:		[33, "specialScriptLiteral"],
		specialScriptBracketLiteral:	[34, "specialScriptBracketLiteral"],
		specialScriptOperatorLiteral:	[35, "specialScriptBracketLiteral"],

		specialIndexNumberLiteral:		[36, "specialScriptLiteral"],
		specialIndexCharLiteral:		[37, "specialScriptLiteral"],
		specialIndexBracketLiteral:		[38, "specialScriptBracketLiteral"],
		specialIndexOperatorLiteral:	[39, "specialScriptBracketLiteral"],

		textLiteral:					[40, "textLiteral"],
		nthrtLiteral:					[41, "nthrtLiteral"],
		fourthrtLiteral:				[41, "fourthrtLiteral"],
		cubertLiteral:					[42, "cubertLiteral"],
		overBarLiteral:					[43, "overBarLiteral"],
	};
	const AutoCorrect = {
		A: [
			["Alpha", "Œë"],
		],
		a: [
			["above", 0x2534],
			["acute", 0x0301],
			["aleph", 0x2135],
			["alpha", 0x03b1],
			["amalg", 0x2210],
			["angle", 0x2220], // word
			["aoint", 0x2233],
			["approx", 0x2248],
			["asmash", 0x2b06],
			["ast", 0x2217],
			["asymp", 0x224d],
			["atop", 0x00a6],
		],
		B: [
			["Bar", 0x033f],
			["Beta",]
		],
		b: [
			["bar", 0x0305],
			["because", 0x2235],
			["begin", 0x3016],
			["below", 0x252c],
			["beta", 0x03b2],
			["beth", 0x2136],
			["bet", 0x2136],
			["bot", 0x22a5],
			["bigcap", 0x22c2],
			["bigcup", 0x22c2],
			["bigodot", 0x2a00],
			["bigoplus", 0x2a01],
			["bigotimes", 0x2a02],
			["bigsqcup", 0x2a06],
			["biguplus", 0x2a04],
			["bigvee", 0x22c1],
			["bigwedge", 0x22c0],
			["bowtie", 0x22c8],
			["boxdot", 0x22a1],
			["boxplus", 0x229e],
			["boxminus", 0x229f],
			["box", 0x25a1],
			["bra", 0x27e8],
			["breve", 0x0306],
			["bullet", 0x2219],
		],
		c: [
			["cap", 0x2229],
			["cbrt", 0x221b],
			["cdots", 0x22ef],
			["cdot", 0x22c5],
			["check", 0x030c],
			["chi", 0x03c7],
			["circ", 0x2218],
			["close", 0x2524],
			["clubsuit", 0x2663],
			["coint", 0x2232],
			["cong", 0x2245],
			["contain", 0x220b],
			["cup", 0x222a],
		],
		D: [
			["Dd", 0x2145],
			["Downarrow", 0x21d3],
			["Delta", 0x0394],
			["Deltaeq", 0x225c],
		],
		d: [
			["daleth", 0x2138],
			["dalet", 0x2138],

			["dashv", 0x22a3],
			["ddddot", 0x20dc],
			["dddot", 0x20db],
			["ddots", 0x22f1],
			["ddot", 0x0308],
			["dd", 0x2146],
			["degree", 0x00b0],
			["delta", 0x03b4],
			["diamondsuit", 0x2662],
			["diamond", 0x22c4],
			["div", 0x00f7],
			["doteq", 0x2250],
			["dots", 0x2026],
			["dot", 0x0307],
			["downarrow", 0x2193],
			["dsmash", 0x2b07],
			["degc", 0x2103],
			["degf", 0x2109],

		],
		e: [
			["ee", 0x2147],
			["ell", 0x2113],
			["emptyset", 0x2205],
			["emsp", 0x2003],
			["end", 0x3017],
			["ensp", 0x2002],
			["epsilon", 0x03f5],
			["eqarray", 0x2588],
			["eqno", 0x0023],
			["equiv", 0x2261],
			["eta", 0x03b7],
			["exists", 0x2203],
		],
		f: [
			["forall", 0x2200],
			["funcapply", 0x2061],
			["frown", 0x2311],
		],
		G: [
			["Gamma", 0x0393],
		],
		g: [
			["gamma", 0x03b3],
			["geq", 0x2265],
			["gets", 0x2190],
			["ge", 0x2265],
			["gg", 0x226b],
			["gimel", 0x2137],
			["grave", 0x0300],
		],
		h: [
			["hairsp", 0x200a],
			["hat", 0x0302],
			["hbar", 0x210f],
			["heartsuit", 0x2661],
			["hookleftarrow", 0x21a9],
			["hookrightarrow", 0x21aa],
			["hphantom", 0x2b04],
			["hsmash", 0x2b0c],
			["hvec", 0x20d1],
		],
		I: [
			["Im", 0x2111],
		],
		i: [
			["iiiint", 0x2a0c],
			["iiint", 0x222d],
			["iint", 0x222c],
			["ii", 0x2148],
			["int", 0x222b],
			["imath", "ùö§"], //todo surogate pair
			["inc", 0x2206],
			["infty", 0x221e],
			["in", 0x2208],
			["iota", 0x03b9],
		],
		j: [
			["jj", 0x2149],
			["jmath", "ùö•"],
		],
		k: [
			["kappa", 0x03ba],
			["ket", 0x27e9],
		],
		L: [
			["Lambda", 0x039b],
			["Longleftrightarrow", 0x27fa],
			["Longrightarrow", 0x27f9],
			["Leftarrow", 0x21d0],
		],
		l: [
			["lambda", 0x03bb],
			["langle", 0x27e8],
			["lbrace", 0x007b],
			["lbrack", 0x005b],
			["lceil", 0x2308],
			["ldiv", 0x2215],
			["ldots", 0x2026],
			["le", 0x2264],
			["leftarrow", 0x2190],
			["leftharpoondown", 0x21bd],
			["leftharpoonup", 0x21bc],
			["Leftrightarrow", 0x21d4],
			["leftrightarrow", 0x2194],
			["leq", 0x2264],
			["lfloor", 0x230a],
			["ll", 0x226a],
			["Longleftarrow", 0x27f8],
			["longleftarrow", 0x27f5],
			["longleftrightarrow", 0x27f7],
			["longrightarrow", 0x27f6],
			["left", 0x251c],
			["lmoust", 0x23b0],
		],
		m: [
			["mapsto", 0x21a6],
			["matrix", 0x25a0],
			["medsp", 0x205f],
			["mid", 0x2223],
			["models", 0x22a8],
			["mp", 0x2213],
			["mu", 0x03bc],
		],
		n: [
			["nabla", 0x2207],
			["naryand", 0x2592],
			["nbsp", 0x00a0],
			["ndiv", 0x2298],
			["nearrow", 0x2197],
			["neg", 0x00ac],
			["neq", 0x2260],
			["ne", 0x2260],

			["ni", 0x220b],
			["norm", 0x2016],
			["nu", 0x03bd],
			["nwarrow", 0x2196],
		],
		O: [
			["Omega", 0x03a9],
		],
		o: [
			["odot", 0x2299],
			["of", 0x2592],
			["oiiint", 0x2230],
			["oiint", 0x222f],
			["oint", 0x222e],
			["omega", 0x03c9],
			["ominus", 0x2296],
			["open", 0x251c],
			["oplus", 0x2295],
			["oslash", 0x2298],
			["otimes", 0x2297],

			["overbar", 0x00af],
			["overbrace", 0x23de],
			["overbracket", 0x23b4],
			["overparen", 0x23dc],
			["overshell", 0x23e0],
			["over", 0x002f],
		],
		P: [
			["Pi", 0x03a0],
			["Phi", 0x03a6],
			["Psi", 0x03a8],
		],
		p: [
			["parallel", 0x2225],
			["partial", 0x2202],
			["perp", 0x22a5],
			["phantom", 0x27e1],
			["phi", 0x03d5],
			["pi", 0x03c0],
			["pm", 0x00b1],
			["pppprime", 0x2057],
			["ppprime", 0x2034],
			["pprime", 0x2033],
			["prcue", 0x227c],
			["preceq", 0x2aaf],
			["preccurlyeq", 0x227c],
			["prec", 0x227a],

			["prime", 0x2032],
			["prod", 0x220f],
			["propto", 0x221d],
			["psi", 0x03c8],
		],
		q: [
			["qdrt", 0x221c],
		],
		R: [
			["Re", 0x211c],
			["Rightarrow", 0x21d2],
		],
		r: [
			["rangle", 0x27e9],
			["ratio", 0x2236],
			["rbrace", 0x007d],
			["rbrack", 0x005d],
			["rceil", 0x2309],
			["rddots", 0x22f0],
			["rect", 0x25ad],
			["rfloor", 0x230b],
			["rho", 0x03c1],
			["right", 0x2524],
			["rightarrow", 0x2192],
			["rightharpoondown", 0x21c1],
			["rightharpoonup", 0x21c0],
			["rmoust", 0x23b1],
			["rrect", 0x25a2],
			["root", 8730],
		],
		S: [
			["Sigma", 0x03a3],
		],
		s: [
			["sdiv", 0x2044],
			["searrow", 0x2198],
			["setminus", 0x2216],
			["sigma", 0x03c3],
			["sim", 0x223c],
			["simeq", 0x2243],
			["smash", 0x2b0d],
			["smile", 0x2323],
			["spadesuit", 0x2660],
			["sqcap", 0x2293],
			["sqcup", 0x2294],
			["sqrt", 0x221a],
			["sqsubseteq", 0x2291],
			["sqsuperseteq", 0x2292],
			["star", 0x22c6],
			["subseteq", 0x2286],
			["subset", 0x2282],
			["succeq", 0x227d],
			["succ", 0x227b],
			["sum", 0x2211],
			["superset", 0x2283],
			["superseteq", 0x2287],
			["swarrow", 0x2199],
		],
		T: [
			["Theta", 0x0398],
		],
		t: [
			["tau", 0x03c4],
			["therefore", 0x2234],
			["theta", 0x03b8],
			["thicksp", 0x2005],
			["thinsp", 0x2006],
			["tilde", 0x0303],
			["times", 0x00d7],
			["to", 0x2192],
			["top", 0x22a4],
			["tvec", 0x20e1],
		],
		U: [
			["Uparrow", 0x21d1],
			["Updownarrow", 0x21d5],
			["Upsilon", 0x03a5],
		],
		u: [
			["ubar", 32],
			["underbar", 0x2581],
			["underbrace", 0x23df],
			["underbracket", 0x23b5],
			["underparen", 0x23dd],
			["undershell", 0x23e1],
			["uparrow", 0x2191],
			["updownarrow", 0x2195],
			["uplus", 0x228e],
			["upsilon", 0x03c5],
		],
		V: [
			["Vert", 0x2016],
		],
		v: [
			["varepsilon", 0x03b5],
			["varphi", 0x03c6],
			["varpi", 0x03d6],
			["varrho", 0x03f1],
			["varsigma", 0x03c2],
			["vartheta", 0x03d1],
			["vbar", 0x2502],
			["vdash", 0x22a2],
			["vdots", 0x22ee],
			["vec", 0x20d7],
			["vee", 0x2228],
			["vert", 0x007c],
			["vphantom", 0x21f3],
			["vthicksp", 0x2004],
		],
		w: [
			["wedge", 0x2227],
			["wp", 0x2118],
			["wr", 0x2240],
		],
		X: [
			["Xi", 0x039e],
		],
		x: [
			["xi", 0x03be],
		],
		z: [
			["zeta", 0x03b6],
			["zwnj", 0x200c],
			["zwsp", 0x200b],
		],
	};
	const UnicodeSpecialScript = {
		"‚Å∞": "0",
		"¬π": "1",
		"¬≤": "2",
		"¬≥": "3",
		"‚Å¥": "4",
		"‚Åµ": "5",
		"‚Å∂": "6",
		"‚Å∑": "7",
		"‚Å∏": "8",
		"‚Åπ": "9",
		"‚Å±": "i",
		"‚Åø": "n",
		"‚Å∫": "+",
		"‚Åª": "-",
		"‚Åº": "=",
		"‚ÅΩ": "(",
		"‚Åæ": ")",

		"‚ÇÄ": "0",
		"‚ÇÅ": "1",
		"‚ÇÇ": "2",
		"‚ÇÉ": "3",
		"‚ÇÑ": "4",
		"‚ÇÖ": "5",
		"‚ÇÜ": "6",
		"‚Çá": "7",
		"‚Çà": "8",
		"‚Çâ": "9",
		"‚Çä": "+",
		"‚Çã": "-",
		"‚Çå": "=",
		"‚Çç": "(",
		"‚Çé": ")",
	}
	const LaTeXTokenRules = [
		[
			function (str) {
				let literal = str[0];
				if (/\d/.test(literal)) {
					return literal;
				}
			},
			oNamesOfLiterals.numberLiteral[0],
		],
		[
			function (str, oTokenizerContext) {
				return oTokenizerContext.ProcessString(str, " ");
			},
			oNamesOfLiterals.spaceLiteral[0],
		],
		[
			function (str) {
				let literal = str[0];
				if (/^[a-zA-Z]/.test(literal)) {
					return literal;
				}
			},
			oNamesOfLiterals.charLiteral[0],
		],

		["\\\\"],

		["\\zeta", oNamesOfLiterals.charLiteral[0], "Œ∂"],
		["\\xi", oNamesOfLiterals.charLiteral[0], "Œæ"],
		["\\wp", oNamesOfLiterals.charLiteral[0], "‚Ñò"],
		["\\widehat", oNamesOfLiterals.accentLiteral[0], 770],
		["\\widecheck", "widecheck"],
		["\\vert", "opOpen/opClose", "‚à£"],
		["\\vec", oNamesOfLiterals.accentLiteral[0], 8407],
		["\\vartheta", oNamesOfLiterals.charLiteral[0], "œë"],
		["\\varsigma", oNamesOfLiterals.charLiteral[0], "œÇ"],
		["\\varrho", oNamesOfLiterals.charLiteral[0], "œ±"],
		["\\varpropto",  oNamesOfLiterals.charLiteral[0], "‚àù"],
		["\\varpi", oNamesOfLiterals.charLiteral[0], "œñ"],
		["\\varphi", oNamesOfLiterals.charLiteral[0], "œÜ"],
		["\\varnothing",  oNamesOfLiterals.charLiteral[0], "‚àÖ"],
		["\\varkappa", oNamesOfLiterals.charLiteral[0], "œ∞"],
		["\\varepsilon", oNamesOfLiterals.charLiteral[0], "Œµ"],
		["\\varPi", oNamesOfLiterals.charLiteral[0], "Œ†"],
		["\\varPhi", oNamesOfLiterals.charLiteral[0], "Œ¶"],
		["\\varOmega", oNamesOfLiterals.charLiteral[0], "Œ©"],
		["\\varLambda", oNamesOfLiterals.charLiteral[0], "Œõ"],
		["\\varGamma", oNamesOfLiterals.charLiteral[0], "Œì"],
		["\\varDelta", oNamesOfLiterals.charLiteral[0], "Œî"],
		["\\urcorner", "opClose", "‚îê"],
		["\\upuparrows",  oNamesOfLiterals.charLiteral[0], "‚áà"],
		["\\upsilon", oNamesOfLiterals.charLiteral[0], "ùúê"],
		["\\uplus",  oNamesOfLiterals.charLiteral[0], "‚äé"],
		["\\upharpoonright",  oNamesOfLiterals.charLiteral[0], "‚Üæ"],
		["\\upharpoonleft",  oNamesOfLiterals.charLiteral[0], "‚Üø"],
		["\\updownarrow",  oNamesOfLiterals.charLiteral[0], "‚Üï"],
		["\\uparrow",  oNamesOfLiterals.charLiteral[0], "‚Üë"],
		["\\unrhd",  oNamesOfLiterals.charLiteral[0], "‚äµ"],
		["\\unlhd",  oNamesOfLiterals.charLiteral[0], "‚ä¥"],
		["\\underrightarrow", "underrightarrow"],
		["\\underparen", "underparen"],
		["\\underlinesegment", "underlinesegment"],
		["\\underline", "underline"],
		["\\underleftrightarrow", "underleftrightarrow"],
		["\\underleftarrow", "underleftarrow"],
		["\\undergroup", "undergroup"],
		["\\underbrace", "underbrace"],
		["\\underbar", "underbar"],
		["\\ulcorner", "opOpen", "‚îå"],
		["\\twoheadrightarrow",  oNamesOfLiterals.charLiteral[0], "‚Ü†"],
		["\\twoheadleftarrow",  oNamesOfLiterals.charLiteral[0], "‚Üû"],
		["\\trianglerighteq",  oNamesOfLiterals.charLiteral[0], "‚äµ"],
		["\\triangleright",  oNamesOfLiterals.charLiteral[0], "‚ñπ"],
		["\\triangleq",  oNamesOfLiterals.charLiteral[0], "‚âú"],
		["\\trianglelefteq",  oNamesOfLiterals.charLiteral[0], "‚ä¥"],
		["\\triangleleft",  oNamesOfLiterals.charLiteral[0], "‚óÉ"],
		["\\triangledown",  oNamesOfLiterals.charLiteral[0], "‚ñΩ"],
		["\\triangle",  oNamesOfLiterals.charLiteral[0], "‚ñ≥"],
		["\\top",  oNamesOfLiterals.charLiteral[0], "‚ä§"],
		["\\to",  oNamesOfLiterals.charLiteral[0], "‚Üí"],
		["\\times", oNamesOfLiterals.mathOperatorLiteral[0], "√ó"],
		["\\tilde", oNamesOfLiterals.accentLiteral[0], 771],
		["\\thicksim ",  oNamesOfLiterals.charLiteral[0], "‚àº"],
		["\\thickapprox",  oNamesOfLiterals.charLiteral[0], "‚âà"],
		["\\theta",  oNamesOfLiterals.charLiteral[0], "Œ∏"],
		["\\therefore",  oNamesOfLiterals.charLiteral[0], "‚à¥"],
		["\\tfrac", "\\tfrac"],
		["\\text{", "text{"],
		["\\tau", oNamesOfLiterals.charLiteral[0], "œÑ"],
		["\\tanh", oNamesOfLiterals.functionLiteral[0]],
		["\\tan", oNamesOfLiterals.functionLiteral[0]],
		["\\swarrow",  oNamesOfLiterals.charLiteral[0], "‚Üô"],
		["\\surd",  oNamesOfLiterals.charLiteral[0], "‚àö"],
		["\\supsetneqq",  oNamesOfLiterals.charLiteral[0], "‚´å"],
		["\\supsetneq",  oNamesOfLiterals.charLiteral[0], "‚äã"],
		["\\supseteqq",  oNamesOfLiterals.charLiteral[0], "‚´Ü"],
		["\\supseteq",  oNamesOfLiterals.charLiteral[0], "‚äá"],
		["\\supset",  oNamesOfLiterals.charLiteral[0], "‚äÉ"],
		["\\sup", oNamesOfLiterals.functionLiteral[0]],
		["\\sum", oNamesOfLiterals.functionLiteral[0]],
		["\\succsim",  oNamesOfLiterals.charLiteral[0], "‚âø"],
		["\\succnsim",  oNamesOfLiterals.charLiteral[0], "‚ã©"],
		["\\succneqq",  oNamesOfLiterals.charLiteral[0], "‚™∂"],
		["\\succnapprox",  oNamesOfLiterals.charLiteral[0], "‚™∫"],
		["\\succeq",  oNamesOfLiterals.charLiteral[0], "‚™∞"],
		["\\succcurlyeq",  oNamesOfLiterals.charLiteral[0], "‚âΩ"],
		["\\succapprox",  oNamesOfLiterals.charLiteral[0], "‚™∏"],
		["\\succ",  oNamesOfLiterals.charLiteral[0], "‚âª"],
		["\\subsetneqq",  oNamesOfLiterals.charLiteral[0], "‚´ã"],
		["\\subsetneq",  oNamesOfLiterals.charLiteral[0], "‚ää"],
		["\\subseteqq",  oNamesOfLiterals.charLiteral[0], "‚´Ö"],
		["\\subseteq",  oNamesOfLiterals.charLiteral[0], "‚äÜ"],
		["\\subset",  oNamesOfLiterals.charLiteral[0], "‚äÇ"],
		["\\star",  oNamesOfLiterals.charLiteral[0], "‚òÖ"],
		["\\square",  oNamesOfLiterals.charLiteral[0], "‚ñ°"],
		["\\sqsupseteq",  oNamesOfLiterals.charLiteral[0], "‚äí"],
		["\\sqsupset",  oNamesOfLiterals.charLiteral[0], "‚äê"],
		["\\sqsubseteq",  oNamesOfLiterals.charLiteral[0], "‚äë"],
		["\\sqsubset",  oNamesOfLiterals.charLiteral[0], "‚äè"],
		["\\sqrt[", "\\sqrt["],
		["\\sqrt", "\\sqrt"],
		["\\sqcup",  oNamesOfLiterals.charLiteral[0], "‚äî"],
		["\\sqcap",  oNamesOfLiterals.charLiteral[0], "‚äì"],
		["\\sphericalangle",  oNamesOfLiterals.charLiteral[0], "‚à¢"],
		["\\spadesuit",  oNamesOfLiterals.charLiteral[0], "‚ô†"],
		["\\smile",  oNamesOfLiterals.charLiteral[0], "‚å£"],
		["\\smallsmile",  oNamesOfLiterals.charLiteral[0], "‚å£"],
		["\\smallsetminus",  oNamesOfLiterals.charLiteral[0], "‚àñ"],
		["\\smallint",  oNamesOfLiterals.charLiteral[0], "‚à´"],
		["\\smallfrown",  oNamesOfLiterals.charLiteral[0], "‚å¢"],
		["\\sinh", oNamesOfLiterals.functionLiteral[0]],
		["\\sin", oNamesOfLiterals.functionLiteral[0]],
		["\\simeq",  oNamesOfLiterals.charLiteral[0], "‚âÉ"],
		["\\sim",  oNamesOfLiterals.charLiteral[0], "‚àº"],
		["\\sigma", oNamesOfLiterals.charLiteral[0], "œÉ"],
		["\\sideset", "\\sideset"], //todo
		["\\shortparallel",  oNamesOfLiterals.charLiteral[0], "‚à•"],
		["\\shortmid",  oNamesOfLiterals.charLiteral[0], "‚à£"],
		["\\sharp",  oNamesOfLiterals.charLiteral[0], "‚ôØ"],
		["\\sf", oNamesOfLiterals.mathFontLiteral[0], 3],
		["\\sec", oNamesOfLiterals.functionLiteral[0]],
		["\\searrow",  oNamesOfLiterals.charLiteral[0], "‚Üò"],
		["\\script", oNamesOfLiterals.mathFontLiteral[0], 7],
		["\\scr", oNamesOfLiterals.mathFontLiteral[0], 7],
		["\\rvert", "‚à£", "opOpen/opClose"],
		["\\rtimes",  oNamesOfLiterals.charLiteral[0], "‚Ü±"],
		["\\rrbracket", "‚üß", "opOpen"],
		["\\rparen", "opClose"],
		["\\root ", "\\root"],
		["\\rmoustache", "opClose", "‚é±"],
		["\\rm", oNamesOfLiterals.mathFontLiteral[0], -1],
		["\\risingdotseq",  oNamesOfLiterals.charLiteral[0], "‚âì"],
		["\\rightthreetimes",  oNamesOfLiterals.charLiteral[0], "‚ãå"],
		["\\rightsquigarrow",  oNamesOfLiterals.charLiteral[0], "‚áù"],
		["\\rightrightarrows",  oNamesOfLiterals.charLiteral[0], "‚áâ"],
		["\\rightleftharpoons",  oNamesOfLiterals.charLiteral[0], "‚áå"],
		["\\rightleftarrows",  oNamesOfLiterals.charLiteral[0], "‚áÑ"],
		["\\rightharpoonup",  oNamesOfLiterals.charLiteral[0], "‚áÄ"],
		["\\rightharpoondown",  oNamesOfLiterals.charLiteral[0], "‚áÅ"],
		["\\rightarrowtail",  oNamesOfLiterals.charLiteral[0], "‚Ü£"],
		["\\rightarrow",  oNamesOfLiterals.charLiteral[0], "‚Üí"],
		["\\right", "\\right"],
		["\\rho", oNamesOfLiterals.charLiteral[0], "œÅ"],
		["\\rhd",  oNamesOfLiterals.charLiteral[0], "‚ä≥"],
		["\\rgroup", "opClose", "‚üØ"],
		["\\rfloor", "opClose", "‚åã"],
		["\\restriction",  oNamesOfLiterals.charLiteral[0], "‚Üæ"],
		["\\rect"],
		["\\rceil", "opClose", "‚åâ"],
		["\\rbrack", "opClose", "]"],
		["\\rbrace", "opClose", "}"],
		["\\rangle", "opClose", "‚ü©"],
		["\\rang", "opClose"],
		["\\rVert", "‚à•", "opOpen/opClose"],
		["\\rBrace", "opClose", "]}"], //todo
		["\\quad", 8193, oNamesOfLiterals.spaceLiteral[0]], // 1 em (nominally, the height of the font)
		["\\qquad", [8193, 8193], oNamesOfLiterals.spaceLiteral[0]], // 2em
		["\\psi ", oNamesOfLiterals.charLiteral[0], "œà"],
		["\\propto ",  oNamesOfLiterals.charLiteral[0], "‚àù"],
		["\\projlim", oNamesOfLiterals.functionLiteral[0]],
		["\\prod", oNamesOfLiterals.functionLiteral[0]],
		["\\prime", oNamesOfLiterals.accentLiteral[0], 39],
		["\\precsim",  oNamesOfLiterals.charLiteral[0], "‚âæ"],
		["\\precnsim",  oNamesOfLiterals.charLiteral[0], "‚ã®"],
		["\\precneqq",  oNamesOfLiterals.charLiteral[0], "‚™µ"],
		["\\precnapprox",  oNamesOfLiterals.charLiteral[0], "‚™π"],
		["\\preceq",  oNamesOfLiterals.charLiteral[0], "‚™Ø"],
		["\\preccurlyeq",  oNamesOfLiterals.charLiteral[0], "‚âº"],
		["\\precapprox",  oNamesOfLiterals.charLiteral[0], "‚™∑"],
		["\\prec",  oNamesOfLiterals.charLiteral[0], "‚â∫"],
		["\\pod"],
		["\\pmod"],
		["\\pmatrix", "\\pmatrix"],
		["\\pm",  oNamesOfLiterals.charLiteral[0], "¬±"],
		["\\pitchfork",  oNamesOfLiterals.charLiteral[0], "‚ãî"],
		["\\pi", oNamesOfLiterals.charLiteral[0], "œÄ"],
		["\\phi",  oNamesOfLiterals.charLiteral[0], "ùúô"],
		["\\phantom", "\\phantom"], //todo
		["\\perp",  oNamesOfLiterals.charLiteral[0], "‚ä•"],
		["\\partial", oNamesOfLiterals.charLiteral[0], "‚àÇ"],
		["\\parallel",  oNamesOfLiterals.charLiteral[0], "‚à•"],
		["\\owns",  oNamesOfLiterals.charLiteral[0], "‚àã"],
		["\\overrightharpoon", "overrightharpoon"],
		["\\overrightarrow", undefined, "Arrow"],
		["\\overrightarrow", "overrightarrow"],
		["\\overparen", "Arrow"],
		["\\overlinesegment", "overlinesegment"],
		["\\overline", "Arrow"],
		["\\overleftrightarrow", undefined, "Arrow"],
		["\\overleftharpoon", "overleftharpoon"],
		["\\overleftarrow", undefined, "Arrow"],
		["\\overgroup", "overgroup"],
		["\\overbrace"],
		["\\over"],
		["\\otimes",  oNamesOfLiterals.charLiteral[0], "‚äó"],
		["\\oslash",  oNamesOfLiterals.charLiteral[0], "‚äò"],
		["\\oplus",  oNamesOfLiterals.charLiteral[0], "‚äï"],
		["\\ominus",  oNamesOfLiterals.charLiteral[0], "‚äñ"],
		["\\omicron", oNamesOfLiterals.charLiteral[0], "Œø"],
		["\\omega", oNamesOfLiterals.charLiteral[0], "œâ"],
		["\\oldstyle", oNamesOfLiterals.mathFontLiteral[0], 7],
		["\\oint", oNamesOfLiterals.functionLiteral[0]], //‚àÆ
		["\\of ", "\\of"],
		["\\odot",  oNamesOfLiterals.charLiteral[0], "‚äô"],
		["\\o", oNamesOfLiterals.charLiteral[0], "Œø"],
		["\\nwarrow",  oNamesOfLiterals.charLiteral[0], "‚Üñ"],
		["\\nvdash",  oNamesOfLiterals.charLiteral[0], "‚ä¨"],
		["\\nvDash",  oNamesOfLiterals.charLiteral[0], "‚ä≠"],
		["\\nu", oNamesOfLiterals.charLiteral[0], "ùúà"],
		["\\ntrianglerighteq",  oNamesOfLiterals.charLiteral[0], "‚ã≠"],
		["\\ntriangleright",  oNamesOfLiterals.charLiteral[0], "‚ã´"],
		["\\ntrianglelefteq",  oNamesOfLiterals.charLiteral[0], "‚ã¨"],
		["\\ntriangleleft",  oNamesOfLiterals.charLiteral[0], "‚ã™"],
		["\\nsupseteq",  oNamesOfLiterals.charLiteral[0], "‚äâ"],
		["\\nsucceq",  oNamesOfLiterals.charLiteral[0], "‚ã°"],
		["\\nsucc",  oNamesOfLiterals.charLiteral[0], "‚äÅ"],
		["\\nsubseteq",  oNamesOfLiterals.charLiteral[0], "‚äà"],
		["\\nsim",  oNamesOfLiterals.charLiteral[0], "‚âÅ"],
		["\\nshortparallel",  oNamesOfLiterals.charLiteral[0], "‚à¶"],
		["\\nshortmid",  oNamesOfLiterals.charLiteral[0], "‚à§"],
		["\\nrightarrow",  oNamesOfLiterals.charLiteral[0], "‚Üõ"],
		["\\npreceq",  oNamesOfLiterals.charLiteral[0], "‚ã†"],
		["\\nprec",  oNamesOfLiterals.charLiteral[0], "‚äÄ"],
		["\\nparallel",  oNamesOfLiterals.charLiteral[0], "‚à¶"],
		["\\notin",  oNamesOfLiterals.charLiteral[0], "‚àâ"],
		["\\not", oNamesOfLiterals.accentLiteral[0], 824],
		["\\nmid",  oNamesOfLiterals.charLiteral[0], "‚à§"],
		["\\nless",  oNamesOfLiterals.charLiteral[0], "‚âÆ"],
		["\\nleqslant",  oNamesOfLiterals.charLiteral[0], "ÓÄê"],
		["\\nleqq",  oNamesOfLiterals.charLiteral[0], "ÓÄë"],
		["\\nleq",  oNamesOfLiterals.charLiteral[0], "‚â∞"],
		["\\nleftrightarrow",  oNamesOfLiterals.charLiteral[0], "‚ÜÆ"],
		["\\nleftarrow",  oNamesOfLiterals.charLiteral[0], "‚Üö"],
		["\\ni",  oNamesOfLiterals.charLiteral[0], "‚àã"],
		["\\ngtr",  oNamesOfLiterals.charLiteral[0], "‚âØ"],
		["\\ngeqslant",  oNamesOfLiterals.charLiteral[0], "ÓÄè"],
		["\\ngeqq",  oNamesOfLiterals.charLiteral[0], "ÓÄé"],
		["\\ngeq",  oNamesOfLiterals.charLiteral[0], "‚â±"],
		["\\nexists",  oNamesOfLiterals.charLiteral[0], "‚àÉÃ∏"],
		["\\neq",  oNamesOfLiterals.charLiteral[0], "‚â†"],
		["\\neg",  oNamesOfLiterals.charLiteral[0], "¬¨"],
		["\\nearrow",  oNamesOfLiterals.charLiteral[0], "‚Üó"],
		["\\ne",  oNamesOfLiterals.charLiteral[0], "‚â†"],
		["\\ncong",  oNamesOfLiterals.charLiteral[0], "‚âÜ"],
		["\\natural",  oNamesOfLiterals.charLiteral[0], "‚ôÆ"],
		["\\nabla",  oNamesOfLiterals.charLiteral[0], "‚àá"],
		["\\nVdash",  oNamesOfLiterals.charLiteral[0], "‚äÆ"],
		["\\nVDash",  oNamesOfLiterals.charLiteral[0], "‚äØ"],
		["\\nRightarrow",  oNamesOfLiterals.charLiteral[0], "‚áè"],
		["\\nLeftrightarrow",  oNamesOfLiterals.charLiteral[0], "‚áé"],
		["\\nLeftarrow",  oNamesOfLiterals.charLiteral[0], "‚áç"],
		["\\multimap",  oNamesOfLiterals.charLiteral[0], "‚ä∏"],
		["\\mu", oNamesOfLiterals.charLiteral[0], "Œº"],
		["\\mp",  oNamesOfLiterals.charLiteral[0], "‚àì"],
		["\\models",  oNamesOfLiterals.charLiteral[0], "‚ä®"],
		["\\mod", oNamesOfLiterals.functionLiteral[0]],
		["\\mit", oNamesOfLiterals.mathFontLiteral[0], 1],
		["\\minimum", oNamesOfLiterals.functionLiteral[0]],
		["\\min", oNamesOfLiterals.functionLiteral[0]],
		["\\mid",  oNamesOfLiterals.charLiteral[0], "‚à£"], //todo Space for mid  https://www.tutorialspoint.com/tex_commands/mid.htm
		["\\mho",  oNamesOfLiterals.charLiteral[0], "‚Ñß"],
		["\\measuredangle",  oNamesOfLiterals.charLiteral[0], "‚à°"],
		["\\maximum", oNamesOfLiterals.functionLiteral[0]],
		["\\max", oNamesOfLiterals.functionLiteral[0]],
		["\\matrix", "\\matrix"],
		["\\mathtt", oNamesOfLiterals.mathFontLiteral[0], 11],
		["\\mathsfit", oNamesOfLiterals.mathFontLiteral[0], 5],
		["\\mathsfbfit", oNamesOfLiterals.mathFontLiteral[0], 6],
		["\\mathsfbf", oNamesOfLiterals.mathFontLiteral[0], 4],
		["\\mathsf", oNamesOfLiterals.mathFontLiteral[0], 3],
		["\\mathrm", oNamesOfLiterals.mathFontLiteral[0], -1],
		["\\mathring", "mathring"],
		["\\mathit", oNamesOfLiterals.mathFontLiteral[0], 1],
		["\\mathfrak", oNamesOfLiterals.mathFontLiteral[0], 9],
		["\\mathcal", oNamesOfLiterals.mathFontLiteral[0], 7],
		["\\mathbfit", oNamesOfLiterals.mathFontLiteral[0], 2],
		["\\mathbffrak", oNamesOfLiterals.mathFontLiteral[0], 10],
		["\\mathbfcal", oNamesOfLiterals.mathFontLiteral[0], 8],
		["\\mathbf", oNamesOfLiterals.mathFontLiteral[0], 0],
		["\\mathbb", oNamesOfLiterals.mathFontLiteral[0], 12],
		["\\mapsto",  oNamesOfLiterals.charLiteral[0], "‚Ü¶"],
		["\\maltese",  oNamesOfLiterals.charLiteral[0], "‚ú†"],
		["\\lvertneqq",  oNamesOfLiterals.charLiteral[0], "‚â®"],
		["\\lvert", "‚à£", "opOpen/opClose"],
		["\\ltimes",  oNamesOfLiterals.charLiteral[0], "‚ãâ"],
		["\\lt",  oNamesOfLiterals.charLiteral[0], "<"],
		["\\lrcorner", "opOpen", "‚îò"],
		["\\lparen", "opOpen"],
		["\\lozenge",  oNamesOfLiterals.charLiteral[0], "‚óä"],
		["\\lor",  oNamesOfLiterals.charLiteral[0], "‚à®"],
		["\\looparrowright",  oNamesOfLiterals.charLiteral[0], "‚Ü¨"],
		["\\looparrowleft",  oNamesOfLiterals.charLiteral[0], "‚Ü´"],
		["\\longrightarrow",  oNamesOfLiterals.charLiteral[0], "‚ü∂"],
		["\\longmapsto",  oNamesOfLiterals.charLiteral[0], "‚üº"],
		["\\longleftrightarrow",  oNamesOfLiterals.charLiteral[0], "‚ü∑"],
		["\\longleftarrow",  oNamesOfLiterals.charLiteral[0], "‚üµ"],
		["\\log", oNamesOfLiterals.functionLiteral[0]],
		["\\lnsim",  oNamesOfLiterals.charLiteral[0], "‚ã¶"],
		["\\lnot",  oNamesOfLiterals.charLiteral[0], "¬¨"],
		["\\lneqq",  oNamesOfLiterals.charLiteral[0], "‚â®"],
		["\\lneq",  oNamesOfLiterals.charLiteral[0], "‚™á"],
		["\\lnapprox",  oNamesOfLiterals.charLiteral[0], "‚™â"],
		["\\ln", oNamesOfLiterals.functionLiteral[0]],
		["\\lmoustache", "opOpen", "‚é∞"],
		["\\llless",  oNamesOfLiterals.charLiteral[0], "‚ãò"],
		["\\lll",  oNamesOfLiterals.charLiteral[0], "‚ãò"],
		["\\llcorner", "opOpen", "‚îî"],
		["\\llbracket", "opOpen", "‚ü¶"],
		["\\ll",  oNamesOfLiterals.charLiteral[0], "‚â™"],
		["\\limsup", oNamesOfLiterals.functionLiteral[0]], // check space
		["\\limits", "\\limits"],
		["\\liminf", oNamesOfLiterals.functionLiteral[0]], // check space
		["\\lim", oNamesOfLiterals.functionLiteral[0]],
		["\\lim", oNamesOfLiterals.functionLiteral[0]],
		["\\lhd",  oNamesOfLiterals.charLiteral[0], "‚ä≤"],
		["\\lgroup", "opOpen", "‚üÆ"],
		["\\lg", oNamesOfLiterals.functionLiteral[0]],
		["\\lfloor", "opOpen", "‚åä"],
		["\\le",  oNamesOfLiterals.charLiteral[0], "‚â§"],
		["\\lesssim",  oNamesOfLiterals.charLiteral[0], "‚â≤"],
		["\\lessgtr",  oNamesOfLiterals.charLiteral[0], "‚â∂"],
		["\\lesseqqgtr",  oNamesOfLiterals.charLiteral[0], "‚™ã"],
		["\\lesseqgtr",  oNamesOfLiterals.charLiteral[0], "‚ãö"],
		["\\lessdot",  oNamesOfLiterals.charLiteral[0], "‚ãñ"],
		["\\lessapprox",  oNamesOfLiterals.charLiteral[0], "‚™Ö"],
		["\\leqslant",  oNamesOfLiterals.charLiteral[0], "‚©Ω"],
		["\\leqq",  oNamesOfLiterals.charLiteral[0], "‚â¶"],
		["\\leq",  oNamesOfLiterals.charLiteral[0], "‚â§"],
		["\\leftthreetimes",  oNamesOfLiterals.charLiteral[0], "‚ãã"],
		["\\leftrightsquigarrow",  oNamesOfLiterals.charLiteral[0], "‚Ü≠"],
		["\\leftrightharpoons",  oNamesOfLiterals.charLiteral[0], "‚áã"],
		["\\leftrightarrows",  oNamesOfLiterals.charLiteral[0], "‚áÜ"],
		["\\leftrightarrow",  oNamesOfLiterals.charLiteral[0], "‚Üî"],
		["\\leftleftarrows",  oNamesOfLiterals.charLiteral[0], "‚áá"],
		["\\leftharpoondown",  oNamesOfLiterals.charLiteral[0], "‚ÜΩ"],
		["\\leftarrowtail",  oNamesOfLiterals.charLiteral[0], "‚Ü¢"],
		["\\leftarrow",  oNamesOfLiterals.charLiteral[0], "‚Üê"],
		["\\left", "\\left"],
		["\\leadsto",  oNamesOfLiterals.charLiteral[0], "‚áù"],
		["\\ldots",  oNamesOfLiterals.charLiteral[0], "‚Ä¶"],
		["\\ldotp",  oNamesOfLiterals.charLiteral[0], "."],
		["\\lceil", "opOpen", "‚åà"],
		["\\lbrack", "opOpen", "["],
		["\\lbrace", "opOpen", "{"],
		["\\langle", "opOpen", "‚ü®"],
		["\\lang", "opOpen"],
		["\\land",  oNamesOfLiterals.charLiteral[0], "‚àß"],
		["\\lambda", oNamesOfLiterals.charLiteral[0], "Œª"],
		["\\lambda", oNamesOfLiterals.charLiteral[0], "Œõ"],
		["\\lambda",  oNamesOfLiterals.charLiteral[0], "ùúÜ"],
		["\\lVert", "‚à•", "opOpen/opClose"],
		["\\lBrace", "opOpen", "{["], //todo
		["\\ker", oNamesOfLiterals.functionLiteral[0]],
		["\\kappa", oNamesOfLiterals.charLiteral[0], "ùúÖ"], // check kappa
		["\\jmath", oNamesOfLiterals.charLiteral[0], "ùêΩ"],
		["\\jmath",  oNamesOfLiterals.charLiteral[0], "ùö•"],
		["\\jj", oNamesOfLiterals.charLiteral[0], "ùëó"],
		["\\j", oNamesOfLiterals.charLiteral[0], "ùêΩùëéùë¶"],
		["\\it", oNamesOfLiterals.mathFontLiteral[0], 1],
		["\\iota", oNamesOfLiterals.charLiteral[0], "Œπ"],
		["\\iota", oNamesOfLiterals.charLiteral[0], "Œô"],
		["\\intop", oNamesOfLiterals.functionLiteral[0]],
		["\\intercal",  oNamesOfLiterals.charLiteral[0], "‚ä∫"],
		["\\int", oNamesOfLiterals.functionLiteral[0]],
		["\\injlim", oNamesOfLiterals.functionLiteral[0]], // todo Check space
		["\\infty",  oNamesOfLiterals.charLiteral[0], "‚àû"],
		["\\infinite", oNamesOfLiterals.functionLiteral[0]],
		["\\inf", oNamesOfLiterals.functionLiteral[0]],
		["\\in",  oNamesOfLiterals.charLiteral[0], "‚àà"],
		["\\implies",  oNamesOfLiterals.charLiteral[0], "‚üπ"],
		["\\impliedby",  oNamesOfLiterals.charLiteral[0], "‚ü∏"],
		["\\imath", oNamesOfLiterals.charLiteral[0], "ùö§"],
		["\\iint", oNamesOfLiterals.functionLiteral[0]],
		["\\iiint", oNamesOfLiterals.functionLiteral[0]],
		["\\iiiint", oNamesOfLiterals.functionLiteral[0]],
		["\\ii", oNamesOfLiterals.charLiteral[0], "ùëñ"],
		["\\iff",  oNamesOfLiterals.charLiteral[0], "‚ü∫"],
		["\\idotsint", oNamesOfLiterals.functionLiteral[0]],
		["\\idotsint",  oNamesOfLiterals.charLiteral[0], "‚à´‚ãØ‚à´"],
		["\\hslash",  oNamesOfLiterals.charLiteral[0], "‚Ñè"],
		["\\hslash",  oNamesOfLiterals.charLiteral[0], "‚Ñè"],
		["\\hookrightarrow",  oNamesOfLiterals.charLiteral[0], "‚Ü™"],
		["\\hookleftarrow",  oNamesOfLiterals.charLiteral[0], "‚Ü©"],
		["\\hom", oNamesOfLiterals.functionLiteral[0]],
		["\\heartsuit",  oNamesOfLiterals.charLiteral[0], "‚ô°"],
		["\\hbar", oNamesOfLiterals.charLiteral[0], "‚Ñè"],
		["\\hat", oNamesOfLiterals.accentLiteral[0], 770],
		["\\gtrsim",  oNamesOfLiterals.charLiteral[0], "‚â≥"],
		["\\gtrless",  oNamesOfLiterals.charLiteral[0], "‚â∑"],
		["\\gtreqqless",  oNamesOfLiterals.charLiteral[0], "‚™å"],
		["\\gtreqless",  oNamesOfLiterals.charLiteral[0], "‚ãõ"],
		["\\gtrdot",  oNamesOfLiterals.charLiteral[0], "‚ãó"],
		["\\gtrapprox",  oNamesOfLiterals.charLiteral[0], "‚™Ü"],
		["\\gt",  oNamesOfLiterals.charLiteral[0], ">"],
		["\\grave", oNamesOfLiterals.accentLiteral[0], 768],
		["\\gnsim",  oNamesOfLiterals.charLiteral[0], "‚ãß"],
		["\\gneqq",  oNamesOfLiterals.charLiteral[0], "‚â©"],
		["\\gneq",  oNamesOfLiterals.charLiteral[0], "‚™à"],
		["\\gimel", oNamesOfLiterals.charLiteral[0], "‚Ñ∑"],
		["\\gimel",  oNamesOfLiterals.charLiteral[0], "‚Ñ∑"],
		["\\gggtr",  oNamesOfLiterals.charLiteral[0], "‚ãô"],
		["\\ggg",  oNamesOfLiterals.charLiteral[0], "‚ãô"],
		["\\gg",  oNamesOfLiterals.charLiteral[0], "‚â´"],
		["\\gets",  oNamesOfLiterals.charLiteral[0], "‚Üê"],
		["\\geqslant",  oNamesOfLiterals.charLiteral[0], "‚©æ"],
		["\\geqq",  oNamesOfLiterals.charLiteral[0], "‚âß"],
		["\\geq",  oNamesOfLiterals.charLiteral[0], "‚â•"],
		["\\ge",  oNamesOfLiterals.charLiteral[0], "‚â•"],
		["\\gcd", oNamesOfLiterals.functionLiteral[0]],
		["\\gamma",  oNamesOfLiterals.charLiteral[0], "Œ≥"],
		["\\frown",  oNamesOfLiterals.charLiteral[0], "‚å¢"],
		["\\fraktur", oNamesOfLiterals.mathFontLiteral[0], 9],
		["\\frak", oNamesOfLiterals.mathFontLiteral[0], 9],
		["\\frac"],
		["\\forall",  oNamesOfLiterals.charLiteral[0], "‚àÄ"],
		["\\flat",  oNamesOfLiterals.charLiteral[0], "‚ô≠"],
		["\\fallingdotseq",  oNamesOfLiterals.charLiteral[0], "‚âí"],
		["\\exp", oNamesOfLiterals.functionLiteral[0]],
		["\\exists",  oNamesOfLiterals.charLiteral[0], "‚àÉ"],
		["\\eth",  oNamesOfLiterals.charLiteral[0], "√∞"],
		["\\eta",  oNamesOfLiterals.charLiteral[0], "Œ∑"],
		["\\equiv",  oNamesOfLiterals.charLiteral[0], "‚â°"],
		["\\eqslantless",  oNamesOfLiterals.charLiteral[0], "‚™ï"],
		["\\eqslantgtr",  oNamesOfLiterals.charLiteral[0], "‚™ñ"],
		["\\eqsim",  oNamesOfLiterals.charLiteral[0], "‚âÇ"],
		["\\eqcirc",  oNamesOfLiterals.charLiteral[0], "‚âñ"],
		["\\epsilon", oNamesOfLiterals.charLiteral[0], "œµ"],
		["\\end{"],
		["\\emptyset",  oNamesOfLiterals.charLiteral[0], "‚àÖ"],
		["\\ell", oNamesOfLiterals.charLiteral[0], "‚Ñì"],
		["\\ee", oNamesOfLiterals.charLiteral[0], "ùëí"],
		["\\downharpoonright",  oNamesOfLiterals.charLiteral[0], "‚áÇ"],
		["\\downharpoonleft",  oNamesOfLiterals.charLiteral[0], "‚áÉ"],
		["\\downdownarrows",  oNamesOfLiterals.charLiteral[0], "‚áä"],
		["\\downarrow",  oNamesOfLiterals.charLiteral[0], "‚Üì"],
		["\\doublecup",  oNamesOfLiterals.charLiteral[0], "‚ãì"],
		["\\doublecap",  oNamesOfLiterals.charLiteral[0], "‚ãí"],
		["\\doublebarwedge",  oNamesOfLiterals.charLiteral[0], "‚©û"],
		["\\double", oNamesOfLiterals.mathFontLiteral[0], 12],
		["\\dotso",  oNamesOfLiterals.charLiteral[0], "‚Ä¶"], //TODO
		["\\dotsm",  oNamesOfLiterals.charLiteral[0], "‚ãØ"], //TODO
		["\\dotsi",  oNamesOfLiterals.charLiteral[0], "‚ãØ"], //TODO
		["\\dotsc",  oNamesOfLiterals.charLiteral[0], "‚Ä¶"],
		["\\dotsb",  oNamesOfLiterals.charLiteral[0], "‚ãØ"], //Binary TODO https://www.tutorialspoint.com/tex_commands/dotsb.htm
		["\\dots",  oNamesOfLiterals.charLiteral[0], "‚Ä¶"],
		["\\dotplus",  oNamesOfLiterals.charLiteral[0], "‚àî"],
		["\\doteq",  oNamesOfLiterals.charLiteral[0], "‚âê"],
		["\\dot", oNamesOfLiterals.accentLiteral[0], 775],
		["\\divideontimes",  oNamesOfLiterals.charLiteral[0], "‚ãá"],
		["\\div",  oNamesOfLiterals.charLiteral[0], "√∑"],
		["\\dim", oNamesOfLiterals.functionLiteral[0]],
		["\\digamma",  oNamesOfLiterals.charLiteral[0], "œù"],
		["\\diamondsuit",  oNamesOfLiterals.charLiteral[0], "‚ô¢"],
		["\\diamond",  oNamesOfLiterals.charLiteral[0], "‚ãÑ"],
		["\\diagup",  oNamesOfLiterals.charLiteral[0], "‚ï±"],
		["\\diagdown",  oNamesOfLiterals.charLiteral[0], "‚ï≤"],
		["\\dfrac{"],
		["\\det", oNamesOfLiterals.functionLiteral[0]],
		["\\delta",  oNamesOfLiterals.charLiteral[0], "Œ¥"],
		["\\deg", oNamesOfLiterals.functionLiteral[0]],
		["\\ddots",  oNamesOfLiterals.charLiteral[0], "‚ã±"],
		["\\ddot", oNamesOfLiterals.accentLiteral[0], 776],
		["\\ddagger",  oNamesOfLiterals.charLiteral[0], "‚Ä°"],
		["\\dd", oNamesOfLiterals.charLiteral[0], "ùëë"],
		["\\dashv",  oNamesOfLiterals.charLiteral[0], "‚ä£"],
		["\\dashrightarrow",  oNamesOfLiterals.charLiteral[0], "‚á¢"],
		["\\dashleftarrow",  oNamesOfLiterals.charLiteral[0], "‚á†"],
		["\\daleth", oNamesOfLiterals.charLiteral[0], "‚Ñ∏"],
		["\\daleth",  oNamesOfLiterals.charLiteral[0], "‚Ñ∏"],
		["\\dalet", oNamesOfLiterals.charLiteral[0], "‚Ñ∏"],
		["\\dagger",  oNamesOfLiterals.charLiteral[0], "‚Ä†"],
		["\\curvearrowright",  oNamesOfLiterals.charLiteral[0], "‚Ü∑"],
		["\\curvearrowleft",  oNamesOfLiterals.charLiteral[0], "‚Ü∂"],
		["\\curlywedge",  oNamesOfLiterals.charLiteral[0], "‚ãè"],
		["\\curlyvee",  oNamesOfLiterals.charLiteral[0], "‚ãé"],
		["\\curlyeqsucc",  oNamesOfLiterals.charLiteral[0], "‚ãü"],
		["\\curlyeqprec",  oNamesOfLiterals.charLiteral[0], "‚ãû"],
		["\\cup",  oNamesOfLiterals.charLiteral[0], "‚à™"],
		["\\csc", oNamesOfLiterals.functionLiteral[0]],
		["\\coth", oNamesOfLiterals.functionLiteral[0]],
		["\\cot", oNamesOfLiterals.functionLiteral[0]],
		["\\cosh", oNamesOfLiterals.functionLiteral[0]],
		["\\cos", oNamesOfLiterals.functionLiteral[0]],
		["\\coprod", oNamesOfLiterals.functionLiteral[0]],
		["\\cong",  oNamesOfLiterals.charLiteral[0], "‚âÖ"],
		["\\complement",  oNamesOfLiterals.charLiteral[0], "‚àÅ"],
		["\\colon",  oNamesOfLiterals.charLiteral[0], ":"],
		["\\clubsuit",  oNamesOfLiterals.charLiteral[0], "‚ô£"],
		["\\circleddash",  oNamesOfLiterals.charLiteral[0], "‚äù"],
		["\\circledcirc",  oNamesOfLiterals.charLiteral[0], "‚äö"],
		["\\circledast",  oNamesOfLiterals.charLiteral[0], "‚äõ"],
		["\\circledS",  oNamesOfLiterals.charLiteral[0], "‚ìà"],
		["\\circledR",  oNamesOfLiterals.charLiteral[0], "¬Æ"],
		["\\circlearrowright",  oNamesOfLiterals.charLiteral[0], "‚Üª"],
		["\\circlearrowleft",  oNamesOfLiterals.charLiteral[0], "‚Ü∫"],
		["\\circeq",  oNamesOfLiterals.charLiteral[0], "‚âó"],
		["\\circ",  oNamesOfLiterals.charLiteral[0], "‚àò"],
		["\\chi", oNamesOfLiterals.charLiteral[0], "œá"],
		["\\checkmark",  oNamesOfLiterals.charLiteral[0], "‚úì"],
		["\\check", oNamesOfLiterals.accentLiteral[0], 780],
		["\\cfrac{"],// https://www.tutorialspoint.com/tex_commands/cfrac.htm
		["\\centerdot",  oNamesOfLiterals.charLiteral[0], "‚ãÖ"],
		["\\cdots",  oNamesOfLiterals.charLiteral[0], "‚ãØ"],
		["\\cdot",  oNamesOfLiterals.charLiteral[0], "‚ãÖ"],
		["\\cap",  oNamesOfLiterals.charLiteral[0], "‚à©"],
		["\\bumpeq",  oNamesOfLiterals.charLiteral[0], "‚âè"],
		["\\bullet",  oNamesOfLiterals.charLiteral[0], "‚àô"],
		["\\breve", oNamesOfLiterals.accentLiteral[0], 774],
		["\\boxtimes",  oNamesOfLiterals.charLiteral[0], "‚ä†"],
		["\\boxplus",  oNamesOfLiterals.charLiteral[0], "‚äû"],
		["\\boxminus",  oNamesOfLiterals.charLiteral[0], "‚äü"],
		["\\boxed", "\\boxed"], //TODO
		["\\boxdot",  oNamesOfLiterals.charLiteral[0], "‚ä°"],
		["\\box"],
		["\\bowtie",  oNamesOfLiterals.charLiteral[0], "‚ãà"],
		["\\bot",  oNamesOfLiterals.charLiteral[0], "‚ä•"],
		["\\blacktriangleright",  oNamesOfLiterals.charLiteral[0], "‚ñ∂"],
		["\\blacktriangleleft",  oNamesOfLiterals.charLiteral[0], "‚óÄ"],
		["\\blacktriangledown",  oNamesOfLiterals.charLiteral[0], "‚ñº"],
		["\\blacktriangle",  oNamesOfLiterals.charLiteral[0], "‚ñ≤"],
		["\\blacksquare",  oNamesOfLiterals.charLiteral[0], "‚ñ†"],
		["\\blacklozenge",  oNamesOfLiterals.charLiteral[0], "‚ß´"],
		["\\binom"],
		["\\bigwedge", oNamesOfLiterals.functionLiteral[0]],
		["\\bigwedge",  oNamesOfLiterals.charLiteral[0], "‚ãÄ"],
		["\\bigvee", oNamesOfLiterals.functionLiteral[0]],
		["\\bigvee",  oNamesOfLiterals.charLiteral[0], "‚ãÅ"],
		["\\biguplus", oNamesOfLiterals.functionLiteral[0]],
		["\\biguplus",  oNamesOfLiterals.charLiteral[0], "‚®Ñ"],
		["\\bigtriangleup",  oNamesOfLiterals.charLiteral[0], "‚ñ≥"],
		["\\bigtriangledown",  oNamesOfLiterals.charLiteral[0], "‚ñΩ"],
		["\\bigstar",  oNamesOfLiterals.charLiteral[0], "‚òÖ"],
		["\\bigsqcup", oNamesOfLiterals.functionLiteral[0]],
		["\\bigsqcup",  oNamesOfLiterals.charLiteral[0], "‚®Ü"],
		["\\bigotimes", oNamesOfLiterals.functionLiteral[0]],
		["\\bigotimes",  oNamesOfLiterals.charLiteral[0], "‚®Ç"],
		["\\bigoplus", oNamesOfLiterals.functionLiteral[0]],
		["\\bigoplus",  oNamesOfLiterals.charLiteral[0], "‚®Å"],
		["\\bigodot", oNamesOfLiterals.functionLiteral[0]],
		["\\bigodot",  oNamesOfLiterals.charLiteral[0], "‚®Ä"],
		["\\bigcup", oNamesOfLiterals.functionLiteral[0]],
		["\\bigcup",  oNamesOfLiterals.charLiteral[0], "‚ãÉ"],
		["\\bigcirc",  oNamesOfLiterals.charLiteral[0], "‚óØ"],
		["\\bigcap", oNamesOfLiterals.functionLiteral[0]],
		["\\bigcap",  oNamesOfLiterals.charLiteral[0], "‚ãÇ"],
		["\\beth", oNamesOfLiterals.charLiteral[0], "‚Ñ∂"],
		["\\beth",  oNamesOfLiterals.charLiteral[0], "‚Ñ∂"],
		["\\beta",  oNamesOfLiterals.charLiteral[0], "Œ≤"],
		["\\bet", oNamesOfLiterals.charLiteral[0], "‚Ñ∂"],
		["\\begin{"],
		["\\because", oNamesOfLiterals.charLiteral[0], "‚àµ"],
		["\\barwedge", oNamesOfLiterals.charLiteral[0], "‚äº"],
		["\\bar", oNamesOfLiterals.accentLiteral[0], 772],
		["\\backslash", "opClose", "\\"],
		["\\backsimeq", oNamesOfLiterals.charLiteral[0], "‚ãç"],
		["\\backsim", oNamesOfLiterals.charLiteral[0], "‚àΩ"],
		["\\backprime", oNamesOfLiterals.charLiteral[0], "‚Äµ"],
		["\\backepsilon", oNamesOfLiterals.charLiteral[0], "‚àç"],
		["\\asymp",  oNamesOfLiterals.charLiteral[0], "‚âç"],
		["\\ast",  oNamesOfLiterals.charLiteral[0], "‚àó"],
		["\\arg", oNamesOfLiterals.functionLiteral[0]],
		["\\arctan", oNamesOfLiterals.functionLiteral[0]],
		["\\arcsin", oNamesOfLiterals.functionLiteral[0]],
		["\\arcsec", oNamesOfLiterals.functionLiteral[0]],
		["\\arccsc", oNamesOfLiterals.functionLiteral[0]],
		["\\arccot", oNamesOfLiterals.functionLiteral[0]],
		["\\arccos", oNamesOfLiterals.functionLiteral[0]],
		["\\approxeq", "‚âä",  oNamesOfLiterals.charLiteral[0]],
		["\\approx",  oNamesOfLiterals.charLiteral[0], "‚âà"],
		["\\angle",  oNamesOfLiterals.charLiteral[0], "‚à†"],
		["\\and",  oNamesOfLiterals.charLiteral[0], "&"],
		["\\amalg",  oNamesOfLiterals.charLiteral[0], "‚®ø"],
		["\\alpha", oNamesOfLiterals.charLiteral[0], "Œ±"],
		["\\aleph", oNamesOfLiterals.charLiteral[0], "‚Ñµ"],
		["\\acute", oNamesOfLiterals.accentLiteral[0], 769],
		["\\Zeta", oNamesOfLiterals.charLiteral[0], "Œñ"],
		["\\Xi", oNamesOfLiterals.charLiteral[0], "Œû"],
		["\\Upsilon", oNamesOfLiterals.charLiteral[0], "ùõ∂"],
		["\\Updownarrow",  oNamesOfLiterals.charLiteral[0], "‚áï"],
		["\\Uparrow",  oNamesOfLiterals.charLiteral[0], "‚áë"],
		["\\Theta",  oNamesOfLiterals.charLiteral[0], "Œò"],
		["\\Tau", oNamesOfLiterals.charLiteral[0], "T"],
		["\\Supset",  oNamesOfLiterals.charLiteral[0], "‚ãë"],
		["\\Subset",  oNamesOfLiterals.charLiteral[0], "‚ãê"],
		["\\Sigma", oNamesOfLiterals.charLiteral[0], "Œ£"],
		["\\S",  oNamesOfLiterals.charLiteral[0], "¬ß"],
		["\\Rsh",  oNamesOfLiterals.charLiteral[0], "‚Ü±"],
		["\\Rrightarrow",  oNamesOfLiterals.charLiteral[0], "‚áõ"],
		["\\Rightarrow",  oNamesOfLiterals.charLiteral[0], "‚áí"],
		["\\Rho", oNamesOfLiterals.charLiteral[0], "Œ°"],
		["\\Re", oNamesOfLiterals.charLiteral[0], "‚Ñú"],
		["\\Psi ", oNamesOfLiterals.charLiteral[0], "Œ®"],
		["\\Pr", oNamesOfLiterals.functionLiteral[0]],
		["\\Pi", oNamesOfLiterals.charLiteral[0], "Œ†"],
		["\\Phi",  oNamesOfLiterals.charLiteral[0], "Œ¶"],
		["\\Overrightarrow", "Overrightarrow"],
		["\\Omicron", oNamesOfLiterals.charLiteral[0], "Œü"],
		["\\Omega", oNamesOfLiterals.charLiteral[0], "Œ©"],
		["\\O", oNamesOfLiterals.charLiteral[0], "Œü"],
		["\\Nu", oNamesOfLiterals.charLiteral[0], "Œù"],
		["\\Mu", oNamesOfLiterals.charLiteral[0], "Œú"],
		["\\Lsh",  oNamesOfLiterals.charLiteral[0], "‚Ü∞"],
		["\\Longrightarrow",  oNamesOfLiterals.charLiteral[0], "‚üπ"],
		["\\Longleftrightarrow",  oNamesOfLiterals.charLiteral[0], "‚ü∫"],
		["\\Longleftarrow",  oNamesOfLiterals.charLiteral[0], "‚ü∏"],
		["\\Lleftarrow",  oNamesOfLiterals.charLiteral[0], "‚áö"],
		["\\Leftrightarrow",  oNamesOfLiterals.charLiteral[0], "‚áî"],
		["\\Leftarrow",  oNamesOfLiterals.charLiteral[0], "‚áê"],
		["\\Lambda",  oNamesOfLiterals.charLiteral[0], "Œõ"],
		["\\Kappa",oNamesOfLiterals.charLiteral[0], "Œö"], // check kappa
		["\\Join",  oNamesOfLiterals.charLiteral[0], "‚ãà"],
		["\\Im", oNamesOfLiterals.charLiteral[0], "ùï¥"],
		["\\Gamma",  oNamesOfLiterals.charLiteral[0], "Œì"],
		["\\Game",  oNamesOfLiterals.charLiteral[0], "‚ÖÅ"],
		["\\G",  oNamesOfLiterals.charLiteral[0], "Œì"],
		["\\Finv",  oNamesOfLiterals.charLiteral[0], "‚Ñ≤"],
		["\\Eta",  oNamesOfLiterals.charLiteral[0], "Œó"],
		["\\Epsilon", oNamesOfLiterals.charLiteral[0], "Œï"],
		["\\Downarrow",  oNamesOfLiterals.charLiteral[0], "‚áì"],
		["\\Doteq",  oNamesOfLiterals.charLiteral[0], "‚âë"],
		["\\Diamond",  oNamesOfLiterals.charLiteral[0], "‚óä"],
		["\\Delta",  oNamesOfLiterals.charLiteral[0], "Œî"],
		["\\Dd", oNamesOfLiterals.charLiteral[0], "ùê∑"],
		["\\Cup",  oNamesOfLiterals.charLiteral[0], "‚ãì"],
		["\\Chi", oNamesOfLiterals.charLiteral[0], "X"],
		["\\Cap",  oNamesOfLiterals.charLiteral[0], "‚ãí"],
		["\\Bumpeq",  oNamesOfLiterals.charLiteral[0], "‚âé"],
		["\\Box",  oNamesOfLiterals.charLiteral[0], "‚ñ°"],
		["\\Beta",  oNamesOfLiterals.charLiteral[0], "Œí"],
		["\\Alpha", oNamesOfLiterals.charLiteral[0], "A"],

		["\\:", 8287, oNamesOfLiterals.spaceLiteral[0]], //	4/18 em
		["\\,", 8198, oNamesOfLiterals.spaceLiteral[0]], // 1/6 em
		[",", oNamesOfLiterals.mathOperatorLiteral[0]], //check type
		["}"],
		["_"],
		["^"],
		["+", oNamesOfLiterals.mathOperatorLiteral[0]],
		["-", oNamesOfLiterals.mathOperatorLiteral[0]],
		["*", oNamesOfLiterals.mathOperatorLiteral[0]],
		["=", oNamesOfLiterals.mathOperatorLiteral[0]],
		["!", oNamesOfLiterals.mathOperatorLiteral[0]],
		["&"],
		["."],
		["'", oNamesOfLiterals.accentLiteral[0]],
		["''", oNamesOfLiterals.accentLiteral[0]],
		["(", "opOpen"],
		[")", "opClose"],
		["[", "opOpen"],
		["]", "opClose"],
		["\\{", "opOpen"],
		["\\}", "opClose"],
		["‚ü®", "opOpen"],
		["‚ü©", "opClose"],
		["|", "opOpen/opClose"],
		["\\|", "opOpen/opClose"],["/", "opOpen"],
		["{"],
		["}"],

		//Delimiters
		// ["\\\v{", "\v{"],
		// ["\\H{", "H{"],
		// ["\\\r{", "\r{"],
		// ['\\"{', '"{'],
		// ["\\.{", ".{"],
		// ["\\\\u{", "\\u{"],
		// ["\\={", "={"],
		// ["\\~{", "~{"],
		// ["\\^{", "^{"],
		// ["\\`{", "`{"],
		// ["\\'{", "'{"],
		// //Accent functions inside \text{‚Ä¶}
		//["\\array"], //TODO//Bigg https://www.tutorialspoint.com/tex_commands/bigg.htm
		// "\\bf" as \\mathbf// \boldsymbol \boldsymbol - applies to nearly all symbols, not just letters and numbers. //TODO//buildrel  https://www.tutorialspoint.com/tex_commands/buildrel.htm
		//\brack - creates a bracketed structure.
		//brace //TODO https://www.tutorialspoint.com/tex_commands/brace.htm//cal  // CALIGRPAHIC https://www.tutorialspoint.com/tex_commands/cal.htm// \cases  https://www.tutorialspoint.com/tex_commands/cases.htm//Chose https://www.tutorialspoint.com/tex_commands/choose.htm//["\\ddddot", "...",  oNamesOfLiterals.charLiteral[0]],
		//["\\dddot", "...",  oNamesOfLiterals.charLiteral[0]],//dbinom TODO//def
		//{ \DeclareMathOperator #1 #2  } //https://www.tutorialspoint.com/tex_commands/declare_math_operator.htm// nolimits_ TODO
		// \det\limits_{\rm sub} TODO// displaystyle
		// displaylines TODO//eqalignno todo - Used for equation alignment with optionally numbered (tagged) lines.
		//eqalign" TODO align//\fbox todo Used to put a box around argument; argument is in text mode.//genfrac todo https://www.tutorialspoint.com/tex_commands/genfrac.htm//["\\gvertneqq",  oNamesOfLiterals.charLiteral[0], "ÓÄç"],//todo \hline - Used to draw horizontal line in matrix
		//todo \hdashline - Used to draw horizontal dash line in matrix
		//todo hbox https://www.tutorialspoint.com/tex_commands/hbox.htm//todo \hfil - Used to set horizontal alignment in matrices and arrays.//todo \Huge//todo \huge//["\\kern" , "Space"], // todo//TODO Large
		//TODO large
		//TODO LARGE//llap  todo//MathBin todo//mathinner todo//mathring todo
		//mathrel todo
		//mathpunct todo
		//mathord todo
		//mathhop todo//\mathstrut - todo Used to achieve more uniform appearance in adjacent formulas as an invisible box whose width is zero.//mbox todo//mkern space todo//mspace todo
		//mskip todo//negthickspace   space todo
		//negmedspace  space todo
		//negthinspace space todo//newenvironment todo
		//newcommand todo
		//operatorname//not todo \not\gt === \ngtr
		//normalsize
		//\nolimits
		// /nobreakspace//mathchoice todo//overwithdelims
		//["\\overset", , "Arrow"],\overset - Used to overset argument #1 (in scriptstyle) over argument #2.{ \overset #1 #2}//["\\pmb", "", ""], todo BOLD//rlap todo//scriptscriptstyle  todo//setminu//shoveright
		//shoveleft//small todo
		//skew todo//space//stackrel//strut todo//substack todo//tbinom//texttt
		//textsf
		//textrm
		//textit
		//textbf//thinspace//Tiny
		//tiny//tt//["\\unicode", "unicode"],
		//["\\underset", "underset"],//uproot//["\\hspace", , oNamesOfLiterals.spaceLiteral[0]], //ex em
		//["\\enspace", 8192, oNamesOfLiterals.spaceLiteral[0]], // EN QUAD 1 en (= 1/2 em)
		// https://latex-tutorial.com/latex-space/
		// https://jkorpela.fi/chars/spaces.html
		//Spaces
		//	\Bbb as mathbb
		//	\atop - Command to create fractions without horizontal fraction bar
		// sub-formula2	Denominator
		// delimiter2	Displayed after the fraction
		// delimiter1	Displayed before the fraction
		// sub-formula1	Displayed as Numerator
		// \atopwithdelims - Command to create fractions without fraction bar//["\\!", "", oNamesOfLiterals.spaceLiteral[0]], TODO realize negative space
		//Text-Spaces ==========//["\\;", "", oNamesOfLiterals.spaceLiteral[0]],
		//["\\>", "", oNamesOfLiterals.spaceLiteral[0]],//Functions// Integrals// todo trig To symbol
		//["\\abovewithdelims", "", ""] //todo \above command gives control over thickness of horizontal fraction bar.
		//["\\above", "", ""] //Fraction
		//["\\", "", ""], //TODO
	];
	const UnicodeTokensRule = [
		[
			function (str) {
				return str[0];
			},
			oNamesOfLiterals.otherLiteral[0],
		],
		[
			function (str) {
				let literal = str[0];
				if (/^[a-zA-Z]/.test(literal)) {
					return literal;
				}
			},
			oNamesOfLiterals.charLiteral[0],
		],
		[
			function (str) {
				let literal = str[0];
				if (/\d/.test(literal)) {
					return literal;
				}
			},
			oNamesOfLiterals.numberLiteral[0],
		],
		[
			function (str) {
				const code = GetFixedCharCodeAt(str[0]);
				if (code >= 768 && code <= 879) {
					return str[0];
				}
			},
			oNamesOfLiterals.diacriticLiteral[0],
		],
		[
			function (str) {
				if (GetLaTeXMathFont.includes(str[0])) {
					return str[0];
				}
			},
			oNamesOfLiterals.otherLiteral[0],
		],

		["&"],
		["@"],
		["\\array("],

		["‚àë", oNamesOfLiterals.opNaryLiteral[0]],
		["‚ÖÄ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ä", oNamesOfLiterals.opNaryLiteral[0]],
		["‚àè", oNamesOfLiterals.opNaryLiteral[0]],
		["‚àê", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ã", oNamesOfLiterals.opNaryLiteral[0]],
		["‚à´", oNamesOfLiterals.opNaryLiteral[0]],
		["‚à¨", oNamesOfLiterals.opNaryLiteral[0]],
		["‚à≠", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®å", oNamesOfLiterals.opNaryLiteral[0]],
		["‚àÆ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚àØ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚à∞", oNamesOfLiterals.opNaryLiteral[0]],
		["‚à±", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ë", oNamesOfLiterals.opNaryLiteral[0]],
		["‚à≤", oNamesOfLiterals.opNaryLiteral[0]],
		["‚à≥", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ç", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®é", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®è", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ï", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ñ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ó", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ò", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ô", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ö", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®õ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ú", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®í", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®ì", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®î", oNamesOfLiterals.opNaryLiteral[0]],
		["‚ãÄ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚ãÅ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚ãÇ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚ãÉ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®É", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®Ñ", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®Ö", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®Ü", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®Ä", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®Å", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®Ç", oNamesOfLiterals.opNaryLiteral[0]],
		["‚®â", oNamesOfLiterals.opNaryLiteral[0]],
		["‚´ø", oNamesOfLiterals.opNaryLiteral[0]],

		[")", oNamesOfLiterals.opCloseBracket[0]],
		["]", oNamesOfLiterals.opCloseBracket[0]],
		["}", oNamesOfLiterals.opCloseBracket[0]],
		["‚å™", oNamesOfLiterals.opCloseBracket[0]],
		["‚ü©", oNamesOfLiterals.opCloseBracket[0]],
		["„Äó", oNamesOfLiterals.opCloseBracket[0]],
		["‚åâ", oNamesOfLiterals.opCloseBracket[0]],
		["‚åã", oNamesOfLiterals.opCloseBracket[0]],

		["(", oNamesOfLiterals.opOpenBracket[0]],
		["[", oNamesOfLiterals.opOpenBracket[0]],
		["{", oNamesOfLiterals.opOpenBracket[0]],
		["‚å©", oNamesOfLiterals.opOpenBracket[0]],
		["‚ü®", oNamesOfLiterals.opOpenBracket[0]],
		["„Äñ", oNamesOfLiterals.opOpenBracket[0]],
		["‚åà", oNamesOfLiterals.opOpenBracket[0]],
		["‚åä", oNamesOfLiterals.opOpenBracket[0]],

		["‚îú"],
		["‚î§"],
		["‚î¨"],
		["‚î¥"],

		["‚Å∞", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["¬π", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["¬≤", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["¬≥", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["‚Å¥", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["‚Åµ", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["‚Å∂", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["‚Å∑", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["‚Å∏", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["‚Åπ", oNamesOfLiterals.specialScriptNumberLiteral[0]],
		["‚Å±", oNamesOfLiterals.specialScriptCharLiteral[0]],
		["‚Åø", oNamesOfLiterals.specialScriptCharLiteral[0]],
		["‚Å∫", oNamesOfLiterals.specialScriptOperatorLiteral[0]],
		["‚Åª", oNamesOfLiterals.specialScriptOperatorLiteral[0]],
		["‚Åº", oNamesOfLiterals.specialScriptOperatorLiteral[0]],
		["‚ÅΩ", oNamesOfLiterals.specialScriptBracketLiteral[0]],
		["‚Åæ", oNamesOfLiterals.specialScriptBracketLiteral[0]],

		["‚ÇÄ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚ÇÅ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚ÇÇ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚ÇÉ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚ÇÑ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚ÇÖ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚ÇÜ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚Çá", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚Çà", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚Çâ", oNamesOfLiterals.specialIndexNumberLiteral[0]],
		["‚Çä", oNamesOfLiterals.specialIndexOperatorLiteral[0]],
		["‚Çã", oNamesOfLiterals.specialIndexOperatorLiteral[0]],
		["‚Çå", oNamesOfLiterals.specialIndexOperatorLiteral[0]],
		["‚Çç", oNamesOfLiterals.specialIndexBracketLiteral[0]],
		["‚Çé", oNamesOfLiterals.specialIndexBracketLiteral[0]],
		["‚ñÅ"],
		["‚ñ≠"],
		["‚ñ°"],
		["!"],
		["‚ñí"],
		["^"],
		["_"],

		["√ó", oNamesOfLiterals.operatorLiteral[0]],
		["‚ãÖ", oNamesOfLiterals.operatorLiteral[0]],
		["‚àà", oNamesOfLiterals.operatorLiteral[0]],
		["‚àã", oNamesOfLiterals.operatorLiteral[0]],
		["‚àº", oNamesOfLiterals.operatorLiteral[0]],
		["‚âÉ", oNamesOfLiterals.operatorLiteral[0]],
		["‚âÖ", oNamesOfLiterals.operatorLiteral[0]],
		["‚âà", oNamesOfLiterals.operatorLiteral[0]],
		["‚âç", oNamesOfLiterals.operatorLiteral[0]],
		["‚â°", oNamesOfLiterals.operatorLiteral[0]],
		["‚â§", oNamesOfLiterals.operatorLiteral[0]],
		["‚â•", oNamesOfLiterals.operatorLiteral[0]],
		["‚â∂", oNamesOfLiterals.operatorLiteral[0]],
		["‚â∑", oNamesOfLiterals.operatorLiteral[0]],
		["‚âΩ", oNamesOfLiterals.operatorLiteral[0]],
		["‚â∫", oNamesOfLiterals.operatorLiteral[0]],
		["‚âª", oNamesOfLiterals.operatorLiteral[0]],
		["‚âº", oNamesOfLiterals.operatorLiteral[0]],
		["‚äÇ", oNamesOfLiterals.operatorLiteral[0]],
		["‚äÉ", oNamesOfLiterals.operatorLiteral[0]],
		["‚äÜ", oNamesOfLiterals.operatorLiteral[0]],
		["‚äá", oNamesOfLiterals.operatorLiteral[0]],
		["‚äë", oNamesOfLiterals.operatorLiteral[0]],
		["‚äí", oNamesOfLiterals.operatorLiteral[0]],
		["+", oNamesOfLiterals.operatorLiteral[0]],
		["-", oNamesOfLiterals.operatorLiteral[0]],
		["=", oNamesOfLiterals.operatorLiteral[0]],
		["*", oNamesOfLiterals.operatorLiteral[0]],
		["‚àÉ", oNamesOfLiterals.operatorLiteral[0]],
		["‚àÄ", oNamesOfLiterals.operatorLiteral[0]],
		["¬¨", oNamesOfLiterals.operatorLiteral[0]],
		["‚àß", oNamesOfLiterals.operatorLiteral[0]],
		["‚à®", oNamesOfLiterals.operatorLiteral[0]],
		["‚áí", oNamesOfLiterals.operatorLiteral[0]],
		["‚áî", oNamesOfLiterals.operatorLiteral[0]],
		["‚äï", oNamesOfLiterals.operatorLiteral[0]],
		["‚ä§", oNamesOfLiterals.operatorLiteral[0]],
		["‚ä•", oNamesOfLiterals.operatorLiteral[0]],
		["‚ä¢", oNamesOfLiterals.operatorLiteral[0]],
		["‚®Ø", oNamesOfLiterals.operatorLiteral[0]],
		["‚®ù", oNamesOfLiterals.operatorLiteral[0]],
		["‚üï", oNamesOfLiterals.operatorLiteral[0]],
		["‚üñ", oNamesOfLiterals.operatorLiteral[0]],
		["‚üó", oNamesOfLiterals.operatorLiteral[0]],
		["‚ãâ", oNamesOfLiterals.operatorLiteral[0]],
		["‚ãä", oNamesOfLiterals.operatorLiteral[0]],
		["‚ñ∑", oNamesOfLiterals.operatorLiteral[0]],
		["√∑", oNamesOfLiterals.operatorLiteral[0]],
		["‚àû", oNamesOfLiterals.operatorLiteral[0]],
		['‚Üê', oNamesOfLiterals.operatorLiteral[0]],
		['‚Üí', oNamesOfLiterals.operatorLiteral[0]],
		['‚Üî', oNamesOfLiterals.operatorLiteral[0]],
		['‚áê', oNamesOfLiterals.operatorLiteral[0]],
		['‚áí', oNamesOfLiterals.operatorLiteral[0]],
		['‚áî', oNamesOfLiterals.operatorLiteral[0]],
		['‚Ü©', oNamesOfLiterals.operatorLiteral[0]],
		['‚Ü™', oNamesOfLiterals.operatorLiteral[0]],
		['‚Üº', oNamesOfLiterals.operatorLiteral[0]],
		['‚áÄ', oNamesOfLiterals.operatorLiteral[0]],
		['‚ÜΩ', oNamesOfLiterals.operatorLiteral[0]],
		['‚áÅ', oNamesOfLiterals.operatorLiteral[0]],
		['‚üµ', oNamesOfLiterals.operatorLiteral[0]],
		['‚ü∂', oNamesOfLiterals.operatorLiteral[0]],
		['‚ü∑', oNamesOfLiterals.operatorLiteral[0]],
		['‚ü∏', oNamesOfLiterals.operatorLiteral[0]],
		['‚üπ', oNamesOfLiterals.operatorLiteral[0]],
		['‚ü∫', oNamesOfLiterals.operatorLiteral[0]],
		['‚Ü¶', oNamesOfLiterals.operatorLiteral[0]],
		['‚ä®', oNamesOfLiterals.operatorLiteral[0]],
		['‚ä¢', oNamesOfLiterals.operatorLiteral[0]],
		["‚ä£", oNamesOfLiterals.operatorLiteral[0]],

		["‚Å°", oNamesOfLiterals.operatorLiteral[0]], // invisible function application
		["‚Å¢", oNamesOfLiterals.operatorLiteral[0]], // invisible times
		["‚Å£", oNamesOfLiterals.operatorLiteral[0]], // invisible seperator
		["‚Å§", oNamesOfLiterals.operatorLiteral[0]], // invisible plus

		["-‚àû", oNamesOfLiterals.operatorLiteral[0]],
		["!!"],

		["^", oNamesOfLiterals.opBuildupLiteral[0]],
		["_", oNamesOfLiterals.opBuildupLiteral[0]],
		["‚àö", oNamesOfLiterals.opBuildupLiteral[0]],
		["‚àö(", oNamesOfLiterals.opBuildupLiteral[0]],
		["‚àõ", oNamesOfLiterals.opBuildupLiteral[0]],
		["‚àú", oNamesOfLiterals.opBuildupLiteral[0]],
		["‚ñ°", oNamesOfLiterals.opBuildupLiteral[0]],
		["/", oNamesOfLiterals.opBuildupLiteral[0]],
		["|", oNamesOfLiterals.opOpenCloseBracket[0]],
		["||", oNamesOfLiterals.opOpenCloseBracket[0]],

		["¬¶", oNamesOfLiterals.overLiteral[0]],
		["/", oNamesOfLiterals.overLiteral[0]],
		["‚àï", oNamesOfLiterals.overLiteral[0]],
		["‚äò", oNamesOfLiterals.overLiteral[0]],
		["‚íû", oNamesOfLiterals.overLiteral[0]],

		["‚èú", oNamesOfLiterals.hBracketLiteral[0]],
		["‚èù", oNamesOfLiterals.hBracketLiteral[0]],
		["‚é¥", oNamesOfLiterals.hBracketLiteral[0]],
		["‚éµ", oNamesOfLiterals.hBracketLiteral[0]],
		["‚èû", oNamesOfLiterals.hBracketLiteral[0]],
		["‚èü", oNamesOfLiterals.hBracketLiteral[0]],
		["‚è†", oNamesOfLiterals.hBracketLiteral[0]],
		["‚è°", oNamesOfLiterals.hBracketLiteral[0]],

		[",", "opDecimal"],
		[".", "opDecimal"],

		//word
		["...", oNamesOfLiterals.otherLiteral[0], "‚Ä¶"],
		[":=", oNamesOfLiterals.otherLiteral[0], "‚âî"],
		["~=", oNamesOfLiterals.otherLiteral[0], "‚âÖ"],
		["+-", oNamesOfLiterals.otherLiteral[0], "¬±"],
		["-+", oNamesOfLiterals.otherLiteral[0], "‚àì"],
		["<=", oNamesOfLiterals.otherLiteral[0], "‚â§"],
		[">=", oNamesOfLiterals.otherLiteral[0], "‚â•"],
		["<<", oNamesOfLiterals.otherLiteral[0], "‚â™"],
		[">>", oNamesOfLiterals.otherLiteral[0], "‚â´"],

		["&", "opArray"],
		["‚ñ†", "opArray"],

		["\""],
		["\'"],
		["\\/", oNamesOfLiterals.overLiteral[0]],

		["‚Äã", oNamesOfLiterals.spaceLiteral[0]], // zero-width space
		["‚Ää", oNamesOfLiterals.spaceLiteral[0]], // 1/18em space very very thin math space
		["‚Ää‚Ää", oNamesOfLiterals.spaceLiteral[0]], // 2/18em space  very thin math space
		["‚Äâ", oNamesOfLiterals.spaceLiteral[0]], // 3/18em space thin math space
		["‚Åü", oNamesOfLiterals.spaceLiteral[0]], // 4/18em space medium math space
		["‚ÄÖ", oNamesOfLiterals.spaceLiteral[0]], // 5/18em space thick math space
		["‚ÄÑ", oNamesOfLiterals.spaceLiteral[0]], // 6/18em space very thick math space
		["‚ÄÑ‚Ää", oNamesOfLiterals.spaceLiteral[0]],  // 7/18em space  very very thick math space
		["‚ÄÇ", oNamesOfLiterals.spaceLiteral[0]], // 9/18em space
		["‚ÄÉ", oNamesOfLiterals.spaceLiteral[0]], // 1em space
		["‚Äá", oNamesOfLiterals.spaceLiteral[0]], // Digit-width space
		[" ", oNamesOfLiterals.spaceLiteral[0]], // Space-with space (non-breaking space)
		["\t", oNamesOfLiterals.spaceLiteral[0]], //Tab
	];
	const GetLaTeXMathFont = [
		'ùêÄ', 'ùê¥', 'ùë®', 'ùñ†', 'ùóî', 'ùòà', 'ùòº', 'ùíú', 'ùìê', 'ùîÑ', 'ùï¨', 'ùô∞', 'ùî∏',
		'ùêÅ', 'ùêµ', 'ùë©', 'ùñ°', 'ùóï', 'ùòâ', 'ùòΩ', '‚Ñ¨', 'ùìë', 'ùîÖ', 'ùï≠', 'ùô±', 'ùîπ',
		'ùêÇ', 'ùê∂', 'ùë™', 'ùñ¢', 'ùóñ', 'ùòä', 'ùòæ', 'ùíû', 'ùìí', '‚Ñ≠', 'ùïÆ', 'ùô≤', '‚ÑÇ',
		'ùêÉ', 'ùê∑', 'ùë´', 'ùñ£', 'ùóó', 'ùòã', 'ùòø', 'ùíü', 'ùìì', 'ùîá', 'ùïØ', 'ùô≥', 'ùîª',
		'ùêÑ', 'ùê∏', 'ùë¨', 'ùñ§', 'ùóò', 'ùòå', 'ùôÄ', '‚Ñ∞', 'ùìî', 'ùîà', 'ùï∞', 'ùô¥', 'ùîº',
		'ùêÖ', 'ùêπ', 'ùë≠', 'ùñ•', 'ùóô', 'ùòç', 'ùôÅ', '‚Ñ±', 'ùìï', 'ùîâ', 'ùï±', 'ùôµ', 'ùîΩ',
		'ùêÜ', 'ùê∫', 'ùëÆ', 'ùñ¶', 'ùóö', 'ùòé', 'ùôÇ', 'ùí¢', 'ùìñ', 'ùîä', 'ùï≤', 'ùô∂', 'ùîæ',
		'ùêá', 'ùêª', 'ùëØ', 'ùñß', 'ùóõ', 'ùòè', 'ùôÉ', '‚Ñã', 'ùìó', '‚Ñå', 'ùï≥', 'ùô∑', '‚Ñç',
		'ùêà', 'ùêº', 'ùë∞', 'ùñ®', 'ùóú', 'ùòê', 'ùôÑ', '‚Ñê', 'ùìò', '‚Ñë', 'ùï¥', 'ùô∏', 'ùïÄ',
		'ùêâ', 'ùêΩ', 'ùë±', 'ùñ©', 'ùóù', 'ùòë', 'ùôÖ', 'ùí•', 'ùìô', 'ùîç', 'ùïµ', 'ùôπ', 'ùïÅ',
		'ùêä', 'ùêæ', 'ùë≤', 'ùñ™', 'ùóû', 'ùòí', 'ùôÜ', 'ùí¶', 'ùìö', 'ùîé', 'ùï∂', 'ùô∫', 'ùïÇ',
		'ùêã', 'ùêø', 'ùë≥', 'ùñ´', 'ùóü', 'ùòì', 'ùôá', '‚Ñí', 'ùìõ', 'ùîè', 'ùï∑', 'ùôª', 'ùïÉ',
		'ùêå', 'ùëÄ', 'ùë¥', 'ùñ¨', 'ùó†', 'ùòî', 'ùôà', '‚Ñ≥', 'ùìú', 'ùîê', 'ùï∏', 'ùôº', 'ùïÑ',
		'ùêç', 'ùëÅ', 'ùëµ', 'ùñ≠', 'ùó°', 'ùòï', 'ùôâ', 'ùí©', 'ùìù', 'ùîë', 'ùïπ', 'ùôΩ', '‚Ñï',
		'ùêé', 'ùëÇ', 'ùë∂', 'ùñÆ', 'ùó¢', 'ùòñ', 'ùôä', 'ùí™', 'ùìû', 'ùîí', 'ùï∫', 'ùôæ', 'ùïÜ',
		'ùêè', 'ùëÉ', 'ùë∑', 'ùñØ', 'ùó£', 'ùòó', 'ùôã', 'ùí´', 'ùìü', 'ùîì', 'ùïª', 'ùôø', '‚Ñô',
		'ùêê', 'ùëÑ', 'ùë∏', 'ùñ∞', 'ùó§', 'ùòò', 'ùôå', 'ùí¨', 'ùì†', 'ùîî', 'ùïº', 'ùöÄ', '‚Ñö',
		'ùêë', 'ùëÖ', 'ùëπ', 'ùñ±', 'ùó•', 'ùòô', 'ùôç', '‚Ñõ', 'ùì°', '‚Ñú', 'ùïΩ', 'ùöÅ', '‚Ñù',
		'ùêí', 'ùëÜ', 'ùë∫', 'ùñ≤', 'ùó¶', 'ùòö', 'ùôé', 'ùíÆ', 'ùì¢', 'ùîñ', 'ùïæ', 'ùöÇ', 'ùïä',
		'ùêì', 'ùëá', 'ùëª', 'ùñ≥', 'ùóß', 'ùòõ', 'ùôè', 'ùíØ', 'ùì£', 'ùîó', 'ùïø', 'ùöÉ', 'ùïã',
		'ùêî', 'ùëà', 'ùëº', 'ùñ¥', 'ùó®', 'ùòú', 'ùôê', 'ùí∞', 'ùì§', 'ùîò', 'ùñÄ', 'ùöÑ', 'ùïå',
		'ùêï', 'ùëâ', 'ùëΩ', 'ùñµ', 'ùó©', 'ùòù', 'ùôë', 'ùí±', 'ùì•', 'ùîô', 'ùñÅ', 'ùöÖ', 'ùïç',
		'ùêñ', 'ùëä', 'ùëæ', 'ùñ∂', 'ùó™', 'ùòû', 'ùôí', 'ùí≤', 'ùì¶', 'ùîö', 'ùñÇ', 'ùöÜ', 'ùïé',
		'ùêó', 'ùëã', 'ùëø', 'ùñ∑', 'ùó´', 'ùòü', 'ùôì', 'ùí≥', 'ùìß', 'ùîõ', 'ùñÉ', 'ùöá', 'ùïè',
		'ùêò', 'ùëå', 'ùíÄ', 'ùñ∏', 'ùó¨', 'ùò†', 'ùôî', 'ùí¥', 'ùì®', 'ùîú', 'ùñÑ', 'ùöà', 'ùïê',
		'ùêô', 'ùëç', 'ùíÅ', 'ùñπ', 'ùó≠', 'ùò°', 'ùôï', 'ùíµ', 'ùì©', '‚Ñ®', 'ùñÖ', 'ùöâ', '‚Ñ§',
		'ùêö', 'ùëé', 'ùíÇ', 'ùñ∫', 'ùóÆ', 'ùò¢', 'ùôñ', 'ùí∂', 'ùì™', 'ùîû', 'ùñÜ', 'ùöä', 'ùïí',
		'ùêõ', 'ùëè', 'ùíÉ', 'ùñª', 'ùóØ', 'ùò£', 'ùôó', 'ùí∑', 'ùì´', 'ùîü', 'ùñá', 'ùöã', 'ùïì',
		'ùêú', 'ùëê', 'ùíÑ', 'ùñº', 'ùó∞', 'ùò§', 'ùôò', 'ùí∏', 'ùì¨', 'ùî†', 'ùñà', 'ùöå', 'ùïî',
		'ùêù', 'ùëë', 'ùíÖ', 'ùñΩ', 'ùó±', 'ùò•', 'ùôô', 'ùíπ', 'ùì≠', 'ùî°', 'ùñâ', 'ùöç', 'ùïï',
		'ùêû', 'ùëí', 'ùíÜ', 'ùñæ', 'ùó≤', 'ùò¶', 'ùôö', '‚ÑØ', 'ùìÆ', 'ùî¢', 'ùñä', 'ùöé', 'ùïñ',
		'ùêü', 'ùëì', 'ùíá', 'ùñø', 'ùó≥', 'ùòß', 'ùôõ', 'ùíª', 'ùìØ', 'ùî£', 'ùñã', 'ùöè', 'ùïó',
		'ùê†', 'ùëî', 'ùíà', 'ùóÄ', 'ùó¥', 'ùò®', 'ùôú', '‚Ñä', 'ùì∞', 'ùî§', 'ùñå', 'ùöê', 'ùïò',
		'ùê°', '‚Ñé', 'ùíâ', 'ùóÅ', 'ùóµ', 'ùò©', 'ùôù', 'ùíΩ', 'ùì±', 'ùî•', 'ùñç', 'ùöë', 'ùïô',
		'ùê¢', 'ùëñ', 'ùíä', 'ùóÇ', 'ùó∂', 'ùò™', 'ùôû', 'ùíæ', 'ùì≤', 'ùî¶', 'ùñé', 'ùöí', 'ùïö',
		'ùê£', 'ùëó', 'ùíã', 'ùóÉ', 'ùó∑', 'ùò´', 'ùôü', 'ùíø', 'ùì≥', 'ùîß', 'ùñè', 'ùöì', 'ùïõ',
		'ùê§', 'ùëò', 'ùíå', 'ùóÑ', 'ùó∏', 'ùò¨', 'ùô†', 'ùìÄ', 'ùì¥', 'ùî®', 'ùñê', 'ùöî', 'ùïú',
		'ùê•', 'ùëô', 'ùíç', 'ùóÖ', 'ùóπ', 'ùò≠', 'ùô°', 'ùìÅ', 'ùìµ', 'ùî©', 'ùñë', 'ùöï', 'ùïù',
		'ùê¶', 'ùëö', 'ùíé', 'ùóÜ', 'ùó∫', 'ùòÆ', 'ùô¢', 'ùìÇ', 'ùì∂', 'ùî™', 'ùñí', 'ùöñ', 'ùïû',
		'ùêß', 'ùëõ', 'ùíè', 'ùóá', 'ùóª', 'ùòØ', 'ùô£', 'ùìÉ', 'ùì∑', 'ùî´', 'ùñì', 'ùöó', 'ùïü',
		'ùê®', 'ùëú', 'ùíê', 'ùóà', 'ùóº', 'ùò∞', 'ùô§', '‚Ñ¥', 'ùì∏', 'ùî¨', 'ùñî', 'ùöò', 'ùï†',
		'ùê©', 'ùëù', 'ùíë', 'ùóâ', 'ùóΩ', 'ùò±', 'ùô•', 'ùìÖ', 'ùìπ', 'ùî≠', 'ùñï', 'ùöô', 'ùï°',
		'ùê™', 'ùëû', 'ùíí', 'ùóä', 'ùóæ', 'ùò≤', 'ùô¶', 'ùìÜ', 'ùì∫', 'ùîÆ', 'ùññ', 'ùöö', 'ùï¢',
		'ùê´', 'ùëü', 'ùíì', 'ùóã', 'ùóø', 'ùò≥', 'ùôß', 'ùìá', 'ùìª', 'ùîØ', 'ùñó', 'ùöõ', 'ùï£',
		'ùê¨', 'ùë†', 'ùíî', 'ùóå', 'ùòÄ', 'ùò¥', 'ùô®', 'ùìà', 'ùìº', 'ùî∞', 'ùñò', 'ùöú', 'ùï§',
		'ùê≠', 'ùë°', 'ùíï', 'ùóç', 'ùòÅ', 'ùòµ', 'ùô©', 'ùìâ', 'ùìΩ', 'ùî±', 'ùñô', 'ùöù', 'ùï•',
		'ùêÆ', 'ùë¢', 'ùíñ', 'ùóé', 'ùòÇ', 'ùò∂', 'ùô™', 'ùìä', 'ùìæ', 'ùî≤', 'ùñö', 'ùöû', 'ùï¶',
		'ùêØ', 'ùë£', 'ùíó', 'ùóè', 'ùòÉ', 'ùò∑', 'ùô´', 'ùìã', 'ùìø', 'ùî≥', 'ùñõ', 'ùöü', 'ùïß',
		'ùê∞', 'ùë§', 'ùíò', 'ùóê', 'ùòÑ', 'ùò∏', 'ùô¨', 'ùìå', 'ùîÄ', 'ùî¥', 'ùñú', 'ùö†', 'ùï®',
		'ùê±', 'ùë•', 'ùíô', 'ùóë', 'ùòÖ', 'ùòπ', 'ùô≠', 'ùìç', 'ùîÅ', 'ùîµ', 'ùñù', 'ùö°', 'ùï©',
		'ùê≤', 'ùë¶', 'ùíö', 'ùóí', 'ùòÜ', 'ùò∫', 'ùôÆ', 'ùìé', 'ùîÇ', 'ùî∂', 'ùñû', 'ùö¢', 'ùï™',
		'ùê≥', 'ùëß', 'ùíõ', 'ùóì', 'ùòá', 'ùòª', 'ùôØ', 'ùìè', 'ùîÉ', 'ùî∑', 'ùñü', 'ùö£', 'ùï´',

		'ùö§',
		'ùö•',

		'Œë', 'ùö®', 'ùõ¢', 'ùúú', 'ùùñ', 'ùûê',
		'Œí', 'ùö©', 'ùõ£', 'ùúù', 'ùùó', 'ùûë',
		'Œì', 'ùö™', 'ùõ§', 'ùúû', 'ùùò', 'ùûí',
		'Œî', 'ùö´', 'ùõ•', 'ùúü', 'ùùô', 'ùûì',
		'Œï', 'ùö¨', 'ùõ¶', 'ùú†', 'ùùö', 'ùûî',
		'Œñ', 'ùö≠', 'ùõß', 'ùú°', 'ùùõ', 'ùûï',
		'Œó', 'ùöÆ', 'ùõ®', 'ùú¢', 'ùùú', 'ùûñ',
		'Œò', 'ùöØ', 'ùõ©', 'ùú£', 'ùùù', 'ùûó',
		'Œô', 'ùö∞', 'ùõ™', 'ùú§', 'ùùû', 'ùûò',
		'Œö', 'ùö±', 'ùõ´', 'ùú•', 'ùùü', 'ùûô',
		'Œõ', 'ùö≤', 'ùõ¨', 'ùú¶', 'ùù†', 'ùûö',
		'Œú', 'ùö≥', 'ùõ≠', 'ùúß', 'ùù°', 'ùûõ',
		'Œù', 'ùö¥', 'ùõÆ', 'ùú®', 'ùù¢', 'ùûú',
		'Œû', 'ùöµ', 'ùõØ', 'ùú©', 'ùù£', 'ùûù',
		'Œü', 'ùö∂', 'ùõ∞', 'ùú™', 'ùù§', 'ùûû',
		'Œ†', 'ùö∑', 'ùõ±', 'ùú´', 'ùù•', 'ùûü',
		'Œ°', 'ùö∏', 'ùõ≤', 'ùú¨', 'ùù¶', 'ùû†',
		'œ¥', 'ùöπ', 'ùõ≥', 'ùú≠', 'ùùß', 'ùû°',
		'Œ£', 'ùö∫', 'ùõ¥', 'ùúÆ', 'ùù®', 'ùû¢',
		'Œ§', 'ùöª', 'ùõµ', 'ùúØ', 'ùù©', 'ùû£',
		'Œ•', 'ùöº', 'ùõ∂', 'ùú∞', 'ùù™', 'ùû§',
		'Œ¶', 'ùöΩ', 'ùõ∑', 'ùú±', 'ùù´', 'ùû•',
		'Œß', 'ùöæ', 'ùõ∏', 'ùú≤', 'ùù¨', 'ùû¶',
		'Œ®', 'ùöø', 'ùõπ', 'ùú≥', 'ùù≠', 'ùûß',
		'Œ©', 'ùõÄ', 'ùõ∫', 'ùú¥', 'ùùÆ', 'ùû®',
		'‚àá', 'ùõÅ', 'ùõª', 'ùúµ', 'ùùØ', 'ùû©',
		'Œ±', 'ùõÇ', 'ùõº', 'ùú∂', 'ùù∞', 'ùû™',
		'Œ≤', 'ùõÉ', 'ùõΩ', 'ùú∑', 'ùù±', 'ùû´',
		'Œ≥', 'ùõÑ', 'ùõæ', 'ùú∏', 'ùù≤', 'ùû¨',
		'Œ¥', 'ùõÖ', 'ùõø', 'ùúπ', 'ùù≥', 'ùû≠',
		'Œµ', 'ùõÜ', 'ùúÄ', 'ùú∫', 'ùù¥', 'ùûÆ',
		'Œ∂', 'ùõá', 'ùúÅ', 'ùúª', 'ùùµ', 'ùûØ',
		'Œ∑', 'ùõà', 'ùúÇ', 'ùúº', 'ùù∂', 'ùû∞',
		'Œ∏', 'ùõâ', 'ùúÉ', 'ùúΩ', 'ùù∑', 'ùû±',
		'Œπ', 'ùõä', 'ùúÑ', 'ùúæ', 'ùù∏', 'ùû≤',
		'Œ∫', 'ùõã', 'ùúÖ', 'ùúø', 'ùùπ', 'ùû≥',
		'Œª', 'ùõå', 'ùúÜ', 'ùùÄ', 'ùù∫', 'ùû¥',
		'Œº', 'ùõç', 'ùúá', 'ùùÅ', 'ùùª', 'ùûµ',
		'ŒΩ', 'ùõé', 'ùúà', 'ùùÇ', 'ùùº', 'ùû∂',
		'Œæ', 'ùõè', 'ùúâ', 'ùùÉ', 'ùùΩ', 'ùû∑',
		'Œø', 'ùõê', 'ùúä', 'ùùÑ', 'ùùæ', 'ùû∏',
		'œÄ', 'ùõë', 'ùúã', 'ùùÖ', 'ùùø', 'ùûπ',
		'œÅ', 'ùõí', 'ùúå', 'ùùÜ', 'ùûÄ', 'ùû∫',
		'œÇ', 'ùõì', 'ùúç', 'ùùá', 'ùûÅ', 'ùûª',
		'œÉ', 'ùõî', 'ùúé', 'ùùà', 'ùûÇ', 'ùûº',
		'œÑ', 'ùõï', 'ùúè', 'ùùâ', 'ùûÉ', 'ùûΩ',
		'œÖ', 'ùõñ', 'ùúê', 'ùùä', 'ùûÑ', 'ùûæ',
		'œÜ', 'ùõó', 'ùúë', 'ùùã', 'ùûÖ', 'ùûø',
		'œá', 'ùõò', 'ùúí', 'ùùå', 'ùûÜ', 'ùüÄ',
		'œà', 'ùõô', 'ùúì', 'ùùç', 'ùûá', 'ùüÅ',
		'œâ', 'ùõö', 'ùúî', 'ùùé', 'ùûà', 'ùüÇ',
		'‚àÇ', 'ùõõ', 'ùúï', 'ùùè', 'ùûâ', 'ùüÉ',
		'œµ', 'ùõú', 'ùúñ', 'ùùê', 'ùûä', 'ùüÑ',
		'œë', 'ùõù', 'ùúó', 'ùùë', 'ùûã', 'ùüÖ',
		'œ∞', 'ùõû', 'ùúò', 'ùùí', 'ùûå', 'ùüÜ',
		'œï', 'ùõü', 'ùúô', 'ùùì', 'ùûç', 'ùüá',
		'œ±', 'ùõ†', 'ùúö', 'ùùî', 'ùûé', 'ùüà',
		'œñ', 'ùõ°', 'ùúõ', 'ùùï', 'ùûè', 'ùüâ',
		'œú', 'ùüä',
		'œù', 'ùüã',
		// '0', 'ùüé', 'ùüò', 'ùü¢', 'ùü¨', 'ùü∂',
		// '1', 'ùüè', 'ùüô', 'ùü£', 'ùü≠', 'ùü∑',
		// '2', 'ùüê', 'ùüö', 'ùü§', 'ùüÆ', 'ùü∏',
		// '3', 'ùüë', 'ùüõ', 'ùü•', 'ùüØ', 'ùüπ',
		// '4', 'ùüí', 'ùüú', 'ùü¶', 'ùü∞', 'ùü∫',
		// '5', 'ùüì', 'ùüù', 'ùüß', 'ùü±', 'ùüª',
		// '6', 'ùüî', 'ùüû', 'ùü®', 'ùü≤', 'ùüº',
		// '7', 'ùüï', 'ùüü', 'ùü©', 'ùü≥', 'ùüΩ',
		// '8', 'ùüñ', 'ùü†', 'ùü™', 'ùü¥', 'ùüæ',
		// '9', 'ùüó', 'ùü°', 'ùü´', 'ùüµ', 'ùüø',

		"‚Öá", "‚Öà", "‚Öâ", "‚ÖÖ", "‚ÖÜ",
	];

	//https://www.cs.bgu.ac.il/~khitron/Equation%20Editor.pdf
	const wordAutoCorrection = [
		["Dd", "‚ÖÖ"],
		["dd", "‚ÖÜ"],
		["ell", "‚Ñì"],//0x2113
		["ee", "‚Öá"],//0x2147
		["hbar", "‚Ñè"],//0x210f
		["ii", "‚Öà"],//0x2148
		["Im", "‚Ñë"],//0x2111
		["imath", "ùö§"],
		["j", "Jay"],
		["jj", "‚Öâ"],//0x2149
		["jmath", "ùö•"],
		["partial", "‚àÇ"],//0x2202
		["Re", "‚Ñú"],//0x211c
		["wp", "‚Ñò"],//0x2118
		["aleph", "‚Ñµ"],//0x2135
		["bet", "‚Ñ∂"],//0x2136["beth", "‚Ñ∂"],//0x2136
		["gimel", "‚Ñ∑"],//0x2137
		["daleth", "‚Ñ∏"], ["dalet", "‚Ñ∏"],

		["Alpha", "Œë"], ["alpha", "Œ±"],//0x03b1
		["Beta", "Œí"], ["beta", "Œ≤"],
		["gamma", "Œ≥"], ["Gamma", "Œì"], ["G", "Œì"],
		["delta", "Œ¥"], ["Delta", "Œî"],
		["epsolon", "œµ"], ["Epsolon", "Œï"], ["varepsilon", "Œµ"],
		["zelta", "Œ∂"], ["Zelta", "Œñ"],
		["eta", "Œ∑"], ["Eta", "Œó"],
		["Theta", "Œò"], ["theta", "Œ∏"], ["vartheta", "œë"],
		["iota", "Œπ"], ["Iota", "Œô"],
		["kappa", "Œ∫"], ["Kappa", "Œö"],
		["lambda", "Œª"], ["Lambda", "Œõ"],
		["mu", "Œº"], ["Mu", "Œú"],
		["nu", "ŒΩ"], ["Nu", "Œù"],
		["xi", "Œæ"], ["Xi", "Œû"],
		["o", "Œø"], ["O", "Œü"],
		["Pi", "Œ†"], ["pi", "œÅ"], ["varpi", "œñ"],
		["rho", "œÅ"], ["Rho", "Œ°"], ["varrho", "œ±"],
		["Sigma", "Œ£"], ["sigma", "œÉ"], ["varsigma", "œÇ"],
		["Tau", "Œ§"], ["tau", "œÑ"],
		["Upsilon", "Œ•"], ["upsilon", "œÖ"],
		["Phi", "Œ¶"], ["phi", "œï"], ["varphi", "œÜ"],
		["Chi", "Œß"], ["chi", "œá"],
		["Psi", "Œ®"], ["psi", "œà"],
		["Omega", "Œ©"], ["omega", "œâ"],

		["!!", "‚Äº"],
		["...", "‚Ä¶"],
		["::", "‚à∑"],
		["...", "‚Ä¶"],
		[":=", "‚âî"],
		["~=", "‚âÖ"],
		["+-", "¬±"],
		["-+", "‚àì"],
		["<=", "‚â§"],
		[">=", "‚â•"],
		["<<", "‚â™"],
		[">>", "‚â´"],

		["angle", "‚à†"],
		["approx", "‚âà"],
		["ast", "‚àó"],
		["asymp", "‚âç"],
		["because", ""],
		["bot", ""],
		["bowtie", ""],
		["boxdot", ""],
		["boxminus", ""],
		["boxplus", ""],
		["bullet", ""],
		["cap", ""],
		["cdot", ""],
		["cdots", ""],
		["circ", ""],
		["clubsuit", ""],
		["cong", ""],
		["cup", ""],
		["equiv", ""],
		["ni", ""],
		["contain", ""],
		["rmoust", ""],
		["succeq", ""],
		["to", ""],
		["rightarrow", ""],
		["Rightarrow", ""],
		["dashv", ""],
		["exists", ""],
		["odot", ""],
		["etminus", ""],
		["superset", ""],
		["gets", ""],
		["leftarrow", ""],
		["Leftarrow", ""],
		["ddots", ""],
		["forall", ""],
		["ominus", ""],
		["sim", ""],
		["superseteq", ""],
		["uparrow", ""],
		["Uparrow", ""],
		["defeq", ""],
		["frown", ""],
		["oplus", ""],
		["simeq", ""],
		["therefore", ""],
		["downarrow", ""],
		["Downarrow", ""],
		["degc", ""],
		["heartsuit", ""],
		["otimes", ""],
		["smile", ""],
		["times", ""],
		["leftrightarrow", ""],
		["Leftrightarrow", ""],
		["degf", ""],
		["in", ""],
		["overbracket", ""],
		["spadesuit", ""],
		["top", ""],
		["updownarrow", ""],
		["Updownarrow", ""],
		["degree", ""],
		["inc", ""],
		["parallel", ""],
		["sqcap", ""],
		["underbracket", ""],
		["nwarrow", ""],
		["Longrightarrow", ""],
		["Deltaeq", ""],
		["infty", ""],
		["perp", ""],
		["sqcup", ""],
		["underline", ""],
		["nearrow", ""],
		["Longleftarrow", ""],
		["diamond", ""],
		["ldots", ""],
		["prec", ""],
		["sqsubseteq", ""],
		["uplus", ""],
		["swarrow", ""],
		["Longleftrightarrow", ""],
		["diamondsuit", ""],
		["left", ""],
		["preceq", ""],
		["sqsuperseteq", ""],
		["vdash", ""],
		["searrow", ""],
		["hookrightarrow", ""],
		["div", ""],
		["lmoust", ""],
		["propto", ""],
		["star", ""],
		["vdots", ""],
		["rightharpoonup", ""],
		["hookleftarrow", ""],
		["doteq", ""],
		["models", ""],
		["ratio", ""],
		["subset", ""],
		["vee", ""],
		["rightharpoondown", ""],
		["break", ""],
		["dots", ""],
		["nabla", ""],
		["rddots", ""],
		["subseteq", ""],
		["wedge", ""],
		["leftharpoonup", ""],
		["lrhar", ""],
		["emptyset", ""],
		["neg", ""],
		["right", ""],
		["succ", ""],
		["wr", ""],
	];
	function GetUnicodeAutoCorrectionToken(str, context) {
		if (str[0] !== "\\") {
			return;
		}

		const isLiteral = (str[0] === "\\" && str[1] === "\\");
		const strLocal = isLiteral
			? str.slice(2)
			: str.slice(1);

		const SegmentForSearch = isLiteral ? AutoCorrect[str[2]] : AutoCorrect[str[1]];
		if (SegmentForSearch) {
			for (let i = 0; i < SegmentForSearch.length; i++) {
				let token = SegmentForSearch[i];
				let result = ProcessString(strLocal, token[0]);
				if (undefined === result) {
					continue
				}

				let strData = typeof token[1] === "string"
					? token[1]
					: String.fromCharCode(token[1]);

				context._cursor += isLiteral ? result + 2 : result;
				if (isLiteral) {
					return {
						class: oNamesOfLiterals.operatorLiteral[0],
						data: strData,
					}
				}
				str = isLiteral
					? str.slice(result + 2)
					: str.slice(result + 1);

				str.splice(0, 0, strData)
				return str
			}
		}
	}
	function ProcessString(str, char) {
		let intLenOfRule = 0;
		while (intLenOfRule <= char.length - 1) {
			if (char[intLenOfRule] === str[intLenOfRule]) {
				intLenOfRule++;
			}
			else {
				return;
			}
		}
		return intLenOfRule;
	}
	function ConvertTokens(oTokens, oContext) {
		let Proceed = function (oTokens, oContext) {
			switch (oTokens.type) {
				case oNamesOfLiterals.charLiteral[num]:
				case oNamesOfLiterals.operatorLiteral[num]:
				case oNamesOfLiterals.mathOperatorLiteral[num]:
				case oNamesOfLiterals.numberLiteral[num]:
					oContext.Add_Text(oTokens.value);
					break;
				case oNamesOfLiterals.preScriptLiteral[num]:
					let oPreSubSup = oContext.Add_Script(
						oTokens.up && oTokens.down,
						{ctrPrp : new CTextPr(), type : DEGREE_PreSubSup},
						null,
						null,
						null
					);
					ConvertTokens(
						oTokens.value,
						oPreSubSup.getBase(),
					);
					if (oTokens.up) {
						ConvertTokens(
							oTokens.up,
							oPreSubSup.getUpperIterator(),
						)
					}
					if (oTokens.down) {
						ConvertTokens(
							oTokens.down,
							oPreSubSup.getLowerIterator(),
						)
					}
					break;
				case oNamesOfLiterals.accentLiteral[num]:
					let oAccent = oContext.Add_Accent(
						new CTextPr(),
						oTokens.value,
						null
					);
					ConvertTokens(
						oTokens.base,
						oAccent.getBase(),
					);
					break;
				case oNamesOfLiterals.fractionLiteral[num]:
					let oFraction = oContext.Add_Fraction(
						{},
						null,
						null
					);
					ConvertTokens(
						oTokens.up,
						oFraction.getNumeratorMathContent()
					);
					ConvertTokens(
						oTokens.down,
						oFraction.getDenominatorMathContent()
					);
					break;
				case oNamesOfLiterals.subSupLiteral[num]:
					let SubSup = oContext.Add_Script(
						oTokens.up && oTokens.down,
						{},
						null,
						null,
						null
					);
					ConvertTokens(
						oTokens.value,
						SubSup.getBase(),
					);
					if (oTokens.up) {
						ConvertTokens(
							oTokens.up,
							SubSup.getUpperIterator(),
						)
					}
					if (oTokens.down) {
						ConvertTokens(
							oTokens.down,
							SubSup.getLowerIterator(),
						)
					}
					break;
				case oNamesOfLiterals.opBuildupLiteral[num]:
					console.log('log')
					break;
				case oNamesOfLiterals.bracketBlockLiteral[num]:
					let oBracket = oContext.Add_DelimiterEx(
						new CTextPr(),
						1,
						[null],
						oTokens.left,
						oTokens.right,
					);
					ConvertTokens(
						oTokens.value,
						oBracket.getElementMathContent(0)
					);
					break;
				case oNamesOfLiterals.sqrtLiteral[num]:
					let oRadical = oContext.Add_Radical(
						{},
						null,
						null
					);
					ConvertTokens(
						oTokens.value,
						oRadical.getBase()
					);
					ConvertTokens(
						oTokens.index,
						oRadical.getDegree()
					);
			}
		}

		let num = 1;
		if (oTokens.type === "LaTeXEquation") {
			oTokens = oTokens.body;
		}
		if (Array.isArray(oTokens)) {
			for (let i = 0; i < oTokens.length; i++) {
				Proceed(oTokens[i], oContext);
			}
		}
		else {
			Proceed(oTokens, oContext)
		}

	}


	function Tokenizer(isLaTeX) {
		this._string = undefined;
		this._cursor = undefined;
		this._isLaTeX = isLaTeX;
		this.TokenRules = isLaTeX ? LaTeXTokenRules : UnicodeTokensRule;
	}
	Tokenizer.prototype.Init = function (string) {
		this._string = this.GetSymbols(string);
		this._cursor = 0;
	}
	/**
	 * Iterate through all characters in a string to account for surrogate pairs
	 * https://mathiasbynens.be/notes/javascript-unicode
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt#fixing_charcodeat_to_handle_non-basic-multilingual-plane_characters_if_their_presence_earlier_in_the_string_is_known
	 */
	Tokenizer.prototype.GetSymbols = function (string) {
		let index = 0;
		let output = [];
		for (; index < string.length; ++index) {
			let charCode = string.charCodeAt(index);
			if (charCode >= 0xd800 && charCode <= 0xdbff) {
				charCode = string.charCodeAt(index + 1);
				if (charCode >= 0xdc00 && charCode <= 0xdfff) {
					output.push(string.slice(index, index + 2));
					++index;
					continue;
				}
			}
			output.push(string.charAt(index));
		}
		return output;
	}
	Tokenizer.prototype.IsHasMoreTokens = function () {
		return this._cursor < this._string.length;
	}
	Tokenizer.prototype.GetNextToken = function () {
		if (!this.IsHasMoreTokens()) {
			return {
				class: undefined,
				data: undefined,
			};
		}

		let string = this._string.slice(this._cursor);
		//Check
		if (!this._isLaTeX) {
			let newString = GetUnicodeAutoCorrectionToken(string, this);
			if (newString) {
				if (Array.isArray(newString)) {
					string = newString;
				}
				else {
					return newString
				}
			}
		}

		for (let i = this.TokenRules.length - 1; i >= 0; i--) {
			let autoCorrectRule = this.TokenRules[i];

			let regexp = autoCorrectRule[0];
			let tokenClass = autoCorrectRule[1];
			if (tokenClass === undefined)
				tokenClass = regexp;

			let tokenData = autoCorrectRule[2];
			let tokenValue = this.MatchToken(regexp, string);

			if (tokenValue === null)
				continue;

			if (undefined === tokenData)
				tokenData = tokenValue;

			return {
				class: tokenClass,
				data: tokenData,
			}
		}

		let str = "";
		for (let i = 0; i <= this._cursor - 1; i++) {
			str += " ";
		}
		str += "^"
		throw new SyntaxError(`Unexpected token: "${string[0]}"\n` + this._string.join('') + "\n" + str);
	}
	Tokenizer.prototype.ProcessString = function (str, char) {
		let intLenOfRule = 0;
		while (intLenOfRule <= char.length - 1) {
			if (char[intLenOfRule] === str[intLenOfRule]) {
				intLenOfRule++;
			} else {
				return;
			}
		}
		return char;
	}
	Tokenizer.prototype.MatchToken = function (regexp, string){
		let oMatched = (typeof regexp === "function")
			? regexp(string, this)
			: this.ProcessString(string, regexp);

		if (oMatched === null || oMatched === undefined) {
			return null;
		}
		this._cursor += this.GetSymbols(oMatched).length;
		return oMatched;
	}
	Tokenizer.prototype.SaveState = function () {
		this.state.push({
			_string: this._string,
			_cursor: this._cursor,
		})
	}
	Tokenizer.prototype.RestoreState = function () {
		let oState = this.state.shift();
		this._cursor = oState._cursor;
		this._string = oState._string;
	}
	function GetFixedCharCodeAt(str) {
		let code = str.charCodeAt(0);
		let hi, low;

		if (0xd800 <= code && code <= 0xdbff) {
			hi = code;
			low = str.charCodeAt(1);
			if (isNaN(low)) {
				return null;
			}
			return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;
		}
		if (0xdc00 <= code && code <= 0xdfff) {
			return false;
		}
		return code;
	}

	//--------------------------------------------------------export----------------------------------------------------
	window["AscCommonWord"] = window["AscCommonWord"] || {};
	window["AscCommonWord"].oNamesOfLiterals = oNamesOfLiterals;
	window["AscCommonWord"].GetUnicodeAutoCorrectionToken = GetUnicodeAutoCorrectionToken;
	window["AscCommonWord"].ConvertTokens = ConvertTokens;
	window["AscCommonWord"].Tokenizer = Tokenizer;
	window["AscCommonWord"].UnicodeSpecialScript = UnicodeSpecialScript;


})(window);
